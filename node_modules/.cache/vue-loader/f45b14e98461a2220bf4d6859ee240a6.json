{"remainingRequest":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/websites/ex.nextsmartchain.com/src/components/core/FPlaceholder/FPlaceholder.vue?vue&type=style&index=0&id=6b35ba15&prod&lang=scss&","dependencies":[{"path":"/mnt/websites/ex.nextsmartchain.com/src/components/core/FPlaceholder/FPlaceholder.vue","mtime":1657708592214},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/css-loader/dist/cjs.js","mtime":1655491291170},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1657708714280},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/postcss-loader/src/index.js","mtime":1655491291810},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/sass-loader/dist/cjs.js","mtime":1657625857833},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js","mtime":1655491106804},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js","mtime":1657708714280}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgJ3N0eWxlJzsK"},{"version":3,"sources":["FPlaceholder.vue"],"names":[],"mappings":";AAiHA","file":"FPlaceholder.vue","sourceRoot":"src/components/core/FPlaceholder","sourcesContent":["<template>\n    <span class=\"f-placeholder\" :class=\"classes\">\n        <template v-if=\"contentLoaded\"><slot></slot></template>\n        <template v-else>\n            <span class=\"replacement-twin\">{{ replacement || '&nbsp;' }}</span>\n            <span class=\"replacement\">{{ replacement || '&nbsp;' }}</span>\n        </template>\n    </span>\n</template>\n\n<script>\n/**\n * Placeholder for a content. Waits for `contentLoaded` to be `true`, meanwhile it shows not visible replacement element\n * with background animation.\n */\nexport default {\n    name: 'FPlaceholder',\n\n    props: {\n        /** Determines whether the content is loaded or not. */\n        contentLoaded: {\n            type: Boolean,\n            default: false,\n        },\n        /** Text to be used in replacement element (not visible). */\n        replacementText: {\n            type: String,\n            default: '',\n        },\n        /** Number of characters of replacement text (if `replacementText` is not set). */\n        replacementNumChars: {\n            type: Number,\n            default: 0,\n        },\n        /** Character used in replacement text if `replacementNumChars` is set. */\n        replacementChar: {\n            type: String,\n            default: 'M',\n        },\n        /** Display placeholder as block. */\n        block: {\n            type: Boolean,\n            default: false,\n        },\n        /** Animate background. */\n        animateBackground: {\n            type: Boolean,\n            default: true,\n        },\n    },\n\n    data() {\n        return {\n            loremIpsum:\n                'Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquid ipsam magni nam odit praesentium temporibus vel voluptates voluptatibus. Aliquam atque autem cum dolores iure minus officia quibusdam quis vel voluptates!</div><div>Dicta numquam officiis placeat sed tempore? Consequatur corporis deserunt doloribus, eaque earum enim, ex facere fugiat, hic id iusto minima nisi obcaecati perferendis repellat sunt tempora voluptate! Distinctio, laborum quia.</div><div>Architecto debitis dicta doloremque dolores eligendi enim error exercitationem, explicabo fugiat hic labore laudantium molestias nesciunt nihil obcaecati porro voluptas voluptate voluptatem. Blanditiis, culpa dignissimos odio porro provident quam velit!',\n        };\n    },\n\n    computed: {\n        replacement() {\n            let replacement = this.replacementText;\n\n            if (replacement === '' && this.replacementNumChars > 0) {\n                // replacement = new Array(this.replacementNumChars).fill(this.replacementChar).join('');\n                replacement = this.loremIpsum.slice(0, this.replacementNumChars);\n            }\n\n            return replacement;\n        },\n        classes() {\n            return {\n                'placeholder-on': !this.contentLoaded,\n                'is-block': this.block,\n                'background-animation-on': this.animateBackground,\n            };\n        },\n    },\n\n    mounted() {\n        this.$nextTick(() => {\n            this.setBackgroundSize();\n        });\n    },\n\n    methods: {\n        setBackgroundSize() {\n            let width = 0;\n\n            if (this.block) {\n                width = this.$el.clientWidth;\n            } else if (!this.contentLoaded) {\n                const eTwin = this.$el.querySelector('.replacement-twin');\n\n                if (eTwin) {\n                    const elStyle = window.getComputedStyle(this.$el);\n\n                    eTwin.style.padding = elStyle.padding;\n                    eTwin.style.fontSize = elStyle.fontSize;\n                    eTwin.style.fontFamily = elStyle.fontFamily;\n\n                    width = eTwin.clientWidth;\n                }\n            }\n\n            if (width > 0) {\n                this.$el.style.setProperty('--f-placeholder-background-size-width', `${width * 2}px`);\n            }\n        },\n    },\n};\n</script>\n\n<style lang=\"scss\">\n@import 'style';\n</style>\n"]}]}