{"remainingRequest":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/websites/ex.nextsmartchain.com/src/components/core/FListbox/FListbox.vue?vue&type=style&index=0&id=56597d74&prod&lang=scss&","dependencies":[{"path":"/mnt/websites/ex.nextsmartchain.com/src/components/core/FListbox/FListbox.vue","mtime":1657708592494},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/css-loader/dist/cjs.js","mtime":1655491291170},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1657708714280},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/postcss-loader/src/index.js","mtime":1655491291810},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/sass-loader/dist/cjs.js","mtime":1657625857833},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js","mtime":1655491106804},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js","mtime":1657708714280}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgInN0eWxlIjsK"},{"version":3,"sources":["FListbox.vue"],"names":[],"mappings":";AAyWA","file":"FListbox.vue","sourceRoot":"src/components/core/FListbox","sourcesContent":["<template>\n    <div :id=\"id\" class=\"flistbox\" :class=\"classes\">\n        <slot name=\"top\" v-bind=\"slotProps\">\n            <f-label v-if=\"label\" :id=\"labeledById\" :label=\"label\" />\n        </slot>\n        <ul\n            ref=\"listbox\"\n            role=\"listbox\"\n            class=\"flistbox_list no-markers\"\n            :tabindex=\"disabled ? -1 : 0\"\n            :aria-activedescendant=\"focusedItem.id\"\n            :aria-labelledby=\"ariaLabeledByIds\"\n            :aria-describedby=\"ariaDescribedByIds\"\n            :aria-disabled=\"disabled\"\n            :aria-invalid=\"validationState.invalid\"\n            @click=\"onClick\"\n            @mousedown.prevent\n            @keydown=\"onKeydown\"\n            @keyup=\"onKeyup\"\n            @focus=\"onFocus\"\n        >\n            <li\n                v-for=\"item in items\"\n                :id=\"item.id\"\n                :key=\"item.id\"\n                role=\"option\"\n                :aria-selected=\"item.id === focusedItem.id\"\n                :aria-disabled=\"!!item.disabled\"\n                class=\"flistbox_list_item\"\n            >\n                <slot :item=\"item\"> {{ item.label }} </slot>\n            </li>\n        </ul>\n        <slot name=\"bottom\" v-bind=\"slotProps\">\n            <div v-if=\"validationState.errors.length > 0\" :id=\"errorMsgId\" class=\"ferrormessages\">\n                <div\n                    v-for=\"(msg, idx) in validationState.errors\"\n                    :key=\"`${errorMsgId}_${idx}_err`\"\n                    class=\"ferrormessages_message\"\n                >\n                    {{ msg }}\n                </div>\n            </div>\n            <div v-else-if=\"infoText\" :id=\"infoTextId\" class=\"finfotext\">\n                {{ infoText }}\n            </div>\n        </slot>\n    </div>\n</template>\n\n<script>\nimport { helpersMixin } from '../../../mixins/helpers.js';\nimport { formInputMixin } from '../../../mixins/form-input.js';\nimport { cloneObject } from '../../../utils';\nimport { isKey, keyboardNavigation } from '../../../utils/aria.js';\nimport { selectMixin } from '../../../mixins/select.js';\nimport FLabel from '../FLabel/FLabel.vue';\n\n/**\n * FListbox item.\n * @typedef {Object} FListboxItem\n * @property {string} [value] Specifies the value of listbox item\n * @property {string} [label] Specifies a label for an item\n * @property {boolean} [disabled] Specifies that an item should be disabled\n * @property {boolean} [selected] Specifies that an item should be pre-selected\n */\n\n/**\n * Listbox component created according to WAI-ARIA rules and practices.\n *\n * @mixes selectMixin\n */\nexport default {\n    name: 'FListbox',\n\n    inheritAttrs: false,\n\n    components: { FLabel },\n\n    mixins: [selectMixin, formInputMixin, helpersMixin],\n\n    model: {\n        prop: 'value',\n        event: 'change',\n    },\n\n    props: {\n        /**\n         * Listbox's items\n         * @type {FListboxItem[]}\n         */\n        data: {\n            type: Array,\n            default() {\n                return [];\n            },\n        },\n        /** If `true`, `component-change` event will be fired right on item focus (keyboard movement, click) */\n        selectImmediately: {\n            type: Boolean,\n            default: false,\n        },\n        /** If `true`, first focusable item will be focused */\n        focusItemOnFocus: {\n            type: Boolean,\n            default: false,\n        },\n        /** If `true`, keyboard navigation will be circular (last item -> first item, first item -> last item) */\n        circularNavigation: {\n            type: Boolean,\n            default: false,\n        },\n        horizontal: {\n            type: Boolean,\n            default: false,\n        },\n    },\n\n    data() {\n        return {\n            items: [],\n            focusedItem: {},\n            selectableItemSelector: '.flistbox_list_item:not([aria-disabled=\"true\"])',\n        };\n    },\n\n    computed: {\n        classes() {\n            return {\n                'flistbox-horizontal': this.horizontal,\n            };\n        },\n    },\n\n    watch: {\n        value(_val) {\n            this.inputValue = _val;\n\n            if (this.focusedItem.value !== _val) {\n                this.focusItem(_val, false, 'value');\n            }\n        },\n\n        data: {\n            handler(_value, _oldValue) {\n                if (JSON.stringify(_value) !== JSON.stringify(_oldValue)) {\n                    this.items = this.getItems();\n                }\n            },\n            deep: true,\n        },\n\n        items() {\n            this.setSelected();\n        },\n    },\n\n    created() {\n        this._firstKeyup = true;\n        this.items = this.getItems();\n    },\n\n    methods: {\n        getItems() {\n            const items = cloneObject(this.data);\n\n            this.setIds(items);\n\n            return items;\n        },\n\n        /**\n         * Select item by `_key`.\n         *\n         * @param {*} _value Item value.\n         * @param {boolean} [_selectItem]\n         * @param {string} [_key] Name of item key.\n         */\n        focusItem(_value, _selectItem, _key = 'id') {\n            let item;\n\n            if (_value !== undefined && !this.disabled) {\n                item = this.items.find(_item => _item[_key] === _value);\n\n                // if (item && item.id !== this.focusedItem.id) {\n                if (item && !item.disabled) {\n                    if (this.selectImmediately || _selectItem) {\n                        this.emitChangeEvent(cloneObject(item), _selectItem ? 'click' : 'focus');\n                    }\n\n                    this.focusedItem = item;\n\n                    this.scrollToFocusedItem();\n                }\n            }\n        },\n\n        focus() {\n            const eListbox = this.$refs.listbox;\n\n            if (eListbox && !this.disabled) {\n                eListbox.focus();\n            }\n        },\n\n        /**\n         * Set selected item.\n         */\n        setSelected() {\n            const { value } = this;\n            let selectedItem = this.items.find(_item => !!_item.selected);\n\n            if (!selectedItem && value) {\n                selectedItem = this.items.find(_item => _item.value === value);\n            }\n\n            this.focusedItem = {};\n\n            if (selectedItem) {\n                this.$nextTick(() => {\n                    this.focusItem(selectedItem.id);\n                    // this.focusItem(selectedItem.id, true);\n                });\n            }\n        },\n\n        scrollToFocusedItem() {\n            const id = this.focusedItem.id;\n            const { $el } = this;\n            const listboxHeight = $el.clientHeight;\n            let eItem;\n\n            if (id && $el.scrollHeight > listboxHeight) {\n                eItem = document.getElementById(id);\n                if (eItem) {\n                    const listboxScrollTop = $el.scrollTop;\n                    const eItemOffsetTop = eItem.offsetTop;\n                    const eItemBottom = eItemOffsetTop + eItem.offsetHeight;\n\n                    if (eItemBottom > listboxScrollTop + listboxHeight) {\n                        $el.scrollTop = eItemBottom - listboxHeight;\n                    } else if (eItemOffsetTop < listboxScrollTop) {\n                        $el.scrollTop = eItemOffsetTop;\n                    }\n                }\n            }\n        },\n\n        /**\n         * @param {FListboxItem} _item\n         * @param {string} [_selectionAction]\n         */\n        emitChangeEvent(_item, _selectionAction = 'focus') {\n            if (this.disabled) {\n                return;\n            }\n\n            this.inputValue = _item.value || '';\n\n            this.$emit('component-change', _item, _selectionAction);\n            this.$emit('change', this.inputValue);\n\n            if (this.validateOnChange) {\n                this.validate();\n            }\n        },\n\n        /**\n         * Focus first focusable item.\n         */\n        focusFirstItem() {\n            if (this.disabled) {\n                return;\n            }\n\n            const item = this.items.find(_item => !_item.disabled);\n\n            if (item) {\n                this.focusedItem = item;\n            }\n        },\n\n        /**\n         * @param {Event} _event\n         */\n        onClick(_event) {\n            if (this.disabled) {\n                return;\n            }\n\n            const eItem = _event.target.closest(this.selectableItemSelector);\n\n            if (eItem) {\n                this.focusItem(eItem.id, true);\n            }\n        },\n\n        /**\n         * @param {KeyboardEvent} _event\n         */\n        onKeydown(_event) {\n            if (this.disabled) {\n                return;\n            }\n\n            let eItem = keyboardNavigation({\n                _event,\n                _selector: this.selectableItemSelector,\n                _direction: 'both',\n                _circular: this.circularNavigation,\n                _target: document.getElementById(this.focusedItem.id),\n                _focusElem: false,\n            });\n\n            if (!eItem && !this.focusedItem.id && (isKey('ArrowDown', _event) || isKey('ArrowUp', _event))) {\n                this.focusFirstItem();\n                eItem = document.getElementById(this.focusedItem.id);\n            }\n\n            if (eItem) {\n                _event.preventDefault();\n                this.focusItem(eItem.id);\n            }\n        },\n\n        /**\n         * @param {KeyboardEvent} _event\n         */\n        onKeyup(_event) {\n            if (this.disabled) {\n                return;\n            }\n\n            // if (!this.selectImmediately && this.focusedItem.id && isKey('Enter', _event) && !this._firstKeyup) {\n            if (this.focusedItem.id && isKey('Enter', _event) && !this._firstKeyup) {\n                this.emitChangeEvent(cloneObject(this.focusedItem), 'enterKey');\n            }\n\n            this._firstKeyup = false;\n        },\n\n        onFocus() {\n            if (this.disabled) {\n                return;\n            }\n\n            this._firstKeyup = true;\n\n            if (this.focusItemOnFocus && !this.focusedItem.id) {\n                if (this.value) {\n                    this.focusItem(this.value, false, 'value');\n                } else {\n                    this.focusFirstItem();\n                }\n            }\n        },\n    },\n};\n</script>\n\n<style lang=\"scss\">\n@import \"style\";\n</style>\n"]}]}