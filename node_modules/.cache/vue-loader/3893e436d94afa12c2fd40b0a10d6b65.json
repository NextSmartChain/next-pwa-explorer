{"remainingRequest":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/websites/ex.nextsmartchain.com/src/data-tables/FBlockList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/mnt/websites/ex.nextsmartchain.com/src/data-tables/FBlockList.vue","mtime":1657708591566},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/babel-loader/lib/index.js","mtime":1655491285588},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js","mtime":1655491106804},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js","mtime":1657708714280}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICAvLyBpbXBvcnQgRkRhdGFUYWJsZSBmcm9tICIuLi9jb21wb25lbnRzL0ZEYXRhVGFibGUudnVlIjsKICAgIGltcG9ydCBGRGF0YVRhYmxlIGZyb20gIi4uL2NvbXBvbmVudHMvY29yZS9GRGF0YVRhYmxlL0ZEYXRhVGFibGUudnVlIjsKICAgIGltcG9ydCBncWwgZnJvbSAnZ3JhcGhxbC10YWcnOwogICAgaW1wb3J0IHsgV0VJVG9GVE0gfSBmcm9tICIuLi91dGlscy90cmFuc2FjdGlvbnMuanMiOwogICAgaW1wb3J0IHt0aW1lc3RhbXBUb0RhdGUsIGZvcm1hdERhdGUsIGZvcm1hdEhleFRvSW50fSBmcm9tICIuLi9maWx0ZXJzLmpzIjsKICAgIGltcG9ydCB7Y2xvbmVPYmplY3R9IGZyb20gIkAvdXRpbHMiOwoKICAgIGV4cG9ydCBkZWZhdWx0IHsKICAgICAgICBjb21wb25lbnRzOiB7CiAgICAgICAgICAgIEZEYXRhVGFibGUKICAgICAgICB9LAoKICAgICAgICBwcm9wczogewogICAgICAgICAgICBoaWRkZW5Db2x1bW5zOiB7CiAgICAgICAgICAgICAgICAuLi5GRGF0YVRhYmxlLnByb3BzLmhpZGRlbkNvbHVtbnMsCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8qKiBOdW1iZXIgb2YgaXRlbXMgcGVyIHBhZ2UuICovCiAgICAgICAgICAgIGl0ZW1zUGVyUGFnZTogewogICAgICAgICAgICAgICAgdHlwZTogTnVtYmVyLAogICAgICAgICAgICAgICAgZGVmYXVsdDogNDAKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGFwb2xsbzogewogICAgICAgICAgICBibG9ja3M6IHsKICAgICAgICAgICAgICAgIHF1ZXJ5OiBncWxgCiAgICAgICAgICAgICAgICAgICAgcXVlcnkgQmxvY2tMaXN0KCRjdXJzb3I6IEN1cnNvciwgJGNvdW50OiBJbnQhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrcyAoY3Vyc29yOiAkY3Vyc29yLCBjb3VudDogJGNvdW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbENvdW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlSW5mbyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlyc3QKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXN0CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzTmV4dAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc1ByZXZpb3VzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlcyB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2sgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bWJlcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25Db3VudAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXNVc2VkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcgogICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgYCwKICAgICAgICAgICAgICAgIHZhcmlhYmxlcygpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICBjdXJzb3I6IG51bGwsCiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiB0aGlzLml0ZW1zUGVyUGFnZQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZXN1bHQoX2RhdGEsIF9rZXkpIHsKICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YTsKCgogICAgICAgICAgICAgICAgICAgIGlmIChfa2V5ID09PSAnYmxvY2tzJykgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnPz8/Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBfZGF0YS5kYXRhLmJsb2NrczsKCiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVkZ2VzID0gY2xvbmVPYmplY3QoZGF0YS5lZGdlcyk7CgogICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRIYXNOZXh0ID0gZGF0YS5wYWdlSW5mby5oYXNOZXh0OwoKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZEl0ZW1zLmxlbmd0aCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kSXRlbXMgPSBlZGdlczsKICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4xID0gZWRnZXMubGVuZ3RoOyBpIDwgbGVuMTsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kSXRlbXMucHVzaChlZGdlc1tpXSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ3JlY29yZHMtY291bnQnLCBmb3JtYXRIZXhUb0ludChkYXRhLnRvdGFsQ291bnQpKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgZXJyb3IoX2Vycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgdGhpcy5kQmxvY2tMaXN0RXJyb3IgPSBfZXJyb3IubWVzc2FnZTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGRhdGEoKSB7CiAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICBkSXRlbXM6IFtdLAogICAgICAgICAgICAgICAgZEhhc05leHQ6IGZhbHNlLAogICAgICAgICAgICAgICAgZEJsb2NrTGlzdEVycm9yOiAnJywKICAgICAgICAgICAgICAgIGdhc1ByaWNlOiB0aGlzLiRzdG9yZS5zdGF0ZS5nYXNQcmljZSwKICAgICAgICAgICAgICAgIGRDb2x1bW5zOiBbCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnYmxvY2snLAogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy4kdCgndmlld19ibG9ja19saXN0LmJsb2NrJyksCiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1Qcm9wOiAnYmxvY2subnVtYmVyJywKICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBmb3JtYXRIZXhUb0ludAogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAndGltZScsCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0aGlzLiR0KCd2aWV3X2Jsb2NrX2xpc3QudGltZScpLAogICAgICAgICAgICAgICAgICAgICAgICBpdGVtUHJvcDogJ2Jsb2NrLnRpbWVzdGFtcCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogKF92YWx1ZSkgPT4gZm9ybWF0RGF0ZSh0aW1lc3RhbXBUb0RhdGUoX3ZhbHVlKSksCiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiAnMzQwcHgnCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdhZ2UnLAogICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogdGhpcy4kdCgndmlld19ibG9ja19saXN0LmFnZScpLAogICAgICAgICAgICAgICAgICAgICAgICBpdGVtUHJvcDogJ2Jsb2NrLnRpbWVzdGFtcCcKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2ZlZScsCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBgJHt0aGlzLiR0KCd2aWV3X2Jsb2NrX2xpc3QuZmVlJyl9IChORVhUKWAsCiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1Qcm9wOiAnYmxvY2suZ2FzVXNlZCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogKF92YWx1ZSkgPT4gV0VJVG9GVE0oX3ZhbHVlICogKHRoaXMuZ2FzUHJpY2UgfHwgMTUwMDAwMDAwMCkpLAogICAgICAgICAgICAgICAgICAgICAgICAvLyB3aWR0aDogJzgwcHgnCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICd0cmFuc2FjdGlvbl9jb3VudCcsCiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0aGlzLiR0KCd2aWV3X2Jsb2NrX2xpc3QudHJhbnNhY3Rpb25fY291bnQnKSwKICAgICAgICAgICAgICAgICAgICAgICAgaXRlbVByb3A6ICdibG9jay50cmFuc2FjdGlvbkNvdW50JywKICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6ICc4MHB4JwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIF0KICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGNvbXB1dGVkOiB7CiAgICAgICAgICAgIGNMb2FkaW5nKCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuJGFwb2xsby5xdWVyaWVzLmJsb2Nrcy5sb2FkaW5nOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgbWV0aG9kczogewogICAgICAgICAgICBmZXRjaE1vcmUoKSB7CiAgICAgICAgICAgICAgICBjb25zdCB7YmxvY2tzfSA9IHRoaXM7CgogICAgICAgICAgICAgICAgaWYgKGJsb2NrcyAmJiBibG9ja3MucGFnZUluZm8gJiYgYmxvY2tzLnBhZ2VJbmZvLmhhc05leHQpIHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJzb3IgPSBibG9ja3MucGFnZUluZm8ubGFzdDsKCiAgICAgICAgICAgICAgICAgICAgdGhpcy4kYXBvbGxvLnF1ZXJpZXMuYmxvY2tzLmZldGNoTW9yZSh7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY3Vyc29yLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IHRoaXMuaXRlbXNQZXJQYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZVF1ZXJ5OiAocHJldmlvdXNSZXN1bHQsIHsgZmV0Y2hNb3JlUmVzdWx0IH0pID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMuZEhhc05leHQgPSBmZXRjaE1vcmVSZXN1bHQuYmxvY2tzLnBhZ2VJbmZvLmhhc05leHQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZldGNoTW9yZVJlc3VsdDsKLyoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvY2tzOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmZldGNoTW9yZVJlc3VsdC5ibG9ja3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkZ2VzOiBbLi4ucHJldmlvdXNSZXN1bHQuYmxvY2tzLmVkZ2VzLCAuLi5mZXRjaE1vcmVSZXN1bHQuYmxvY2tzLmVkZ2VzXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KKi8KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAoKICAgICAgICAgICAgV0VJVG9GVE0sCiAgICAgICAgICAgIHRpbWVzdGFtcFRvRGF0ZQogICAgICAgIH0KICAgIH0K"},{"version":3,"sources":["FBlockList.vue"],"names":[],"mappings":";AA+CA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"FBlockList.vue","sourceRoot":"src/data-tables","sourcesContent":["<template>\n    <div class=\"block-list-dt\">\n        <template v-if=\"!dBlockListError\">\n            <f-data-table\n                :columns=\"dColumns\"\n                :items=\"dItems\"\n                :disable-infinite-scroll=\"!dHasNext\"\n                :loading=\"cLoading\"\n                infinite-scroll\n                fixed-header\n                v-bind=\"{...$attrs, ...$props}\"\n                class=\"f-data-table-body-bg-color\"\n                @fetch-more=\"fetchMore\"\n            >\n                <template v-slot:column-block=\"{ value, column }\">\n                    <div v-if=\"column\" class=\"row no-collapse no-vert-col-padding\">\n                        <div class=\"col-4 f-row-label\">{{ column.label }}</div>\n                        <div class=\"col\">\n                            <router-link :to=\"{name: 'block-detail', params: {id: value}}\" :title=\"value\">{{value}}</router-link>\n                        </div>\n                    </div>\n                    <template v-else>\n                        <router-link :to=\"{name: 'block-detail', params: {id: value}}\" :title=\"value\">{{value}}</router-link>\n                    </template>\n                </template>\n\n                <template v-slot:column-age=\"{ value, column }\">\n                    <div v-if=\"column\" class=\"row no-collapse no-vert-col-padding\">\n                        <div class=\"col-4 f-row-label\">{{ column.label }}</div>\n                        <div class=\"col\">\n                            <timeago :datetime=\"timestampToDate(value)\" :auto-update=\"1\" :converter-options=\"{includeSeconds: true}\"></timeago>\n                        </div>\n                    </div>\n                    <template v-else>\n                        <timeago :datetime=\"timestampToDate(value)\" :auto-update=\"5\" :converter-options=\"{includeSeconds: true}\"></timeago>\n                    </template>\n                </template>\n            </f-data-table>\n        </template>\n\n        <template v-else>\n            <div class=\"query-error\">{{ dBlockListError }}</div>\n        </template>\n    </div>\n</template>\n\n<script>\n    // import FDataTable from \"../components/FDataTable.vue\";\n    import FDataTable from \"../components/core/FDataTable/FDataTable.vue\";\n    import gql from 'graphql-tag';\n    import { WEIToFTM } from \"../utils/transactions.js\";\n    import {timestampToDate, formatDate, formatHexToInt} from \"../filters.js\";\n    import {cloneObject} from \"@/utils\";\n\n    export default {\n        components: {\n            FDataTable\n        },\n\n        props: {\n            hiddenColumns: {\n                ...FDataTable.props.hiddenColumns,\n            },\n            /** Number of items per page. */\n            itemsPerPage: {\n                type: Number,\n                default: 40\n            }\n        },\n\n        apollo: {\n            blocks: {\n                query: gql`\n                    query BlockList($cursor: Cursor, $count: Int!) {\n                        blocks (cursor: $cursor, count: $count) {\n                            totalCount\n                            pageInfo {\n                                first\n                                last\n                                hasNext\n                                hasPrevious\n                            }\n                            edges {\n                                block {\n                                    hash\n                                    number\n                                    timestamp\n                                    transactionCount\n                                    gasUsed\n                                }\n                                cursor\n                            }\n                        }\n                    }\n                `,\n                variables() {\n                    return {\n                        cursor: null,\n                        count: this.itemsPerPage\n                    }\n                },\n                result(_data, _key) {\n                    let data;\n\n\n                    if (_key === 'blocks') {\n                        // console.log('???');\n                        data = _data.data.blocks;\n\n                        const edges = cloneObject(data.edges);\n\n                        this.dHasNext = data.pageInfo.hasNext;\n\n                        if (this.dItems.length === 0) {\n                            this.dItems = edges;\n                        } else {\n                            for (let i = 0, len1 = edges.length; i < len1; i++) {\n                                this.dItems.push(edges[i]);\n                            }\n                        }\n\n                        this.$emit('records-count', formatHexToInt(data.totalCount));\n                    }\n                },\n                error(_error) {\n                    this.dBlockListError = _error.message;\n                }\n            }\n        },\n\n        data() {\n            return {\n                dItems: [],\n                dHasNext: false,\n                dBlockListError: '',\n                gasPrice: this.$store.state.gasPrice,\n                dColumns: [\n                    {\n                        name: 'block',\n                        label: this.$t('view_block_list.block'),\n                        itemProp: 'block.number',\n                        formatter: formatHexToInt\n                    },\n                    {\n                        name: 'time',\n                        label: this.$t('view_block_list.time'),\n                        itemProp: 'block.timestamp',\n                        formatter: (_value) => formatDate(timestampToDate(_value)),\n                        width: '340px'\n                    },\n                    {\n                        name: 'age',\n                        label: this.$t('view_block_list.age'),\n                        itemProp: 'block.timestamp'\n                    },\n                    {\n                        name: 'fee',\n                        label: `${this.$t('view_block_list.fee')} (NEXT)`,\n                        itemProp: 'block.gasUsed',\n                        formatter: (_value) => WEIToFTM(_value * (this.gasPrice || 1500000000)),\n                        // width: '80px'\n                    },\n                    {\n                        name: 'transaction_count',\n                        label: this.$t('view_block_list.transaction_count'),\n                        itemProp: 'block.transactionCount',\n                        width: '80px'\n                    }\n                ]\n            }\n        },\n\n        computed: {\n            cLoading() {\n                return this.$apollo.queries.blocks.loading;\n            }\n        },\n\n        methods: {\n            fetchMore() {\n                const {blocks} = this;\n\n                if (blocks && blocks.pageInfo && blocks.pageInfo.hasNext) {\n                    const cursor = blocks.pageInfo.last;\n\n                    this.$apollo.queries.blocks.fetchMore({\n                        variables: {\n                            cursor,\n                            count: this.itemsPerPage\n                        },\n                        updateQuery: (previousResult, { fetchMoreResult }) => {\n                            // this.dHasNext = fetchMoreResult.blocks.pageInfo.hasNext;\n\n                            return fetchMoreResult;\n/*\n                            return {\n                                blocks: {\n                                    ...fetchMoreResult.blocks,\n                                    edges: [...previousResult.blocks.edges, ...fetchMoreResult.blocks.edges]\n                                }\n                            }\n*/\n                        }\n                    });\n                }\n            },\n\n            WEIToFTM,\n            timestampToDate\n        }\n    }\n</script>\n"]}]}