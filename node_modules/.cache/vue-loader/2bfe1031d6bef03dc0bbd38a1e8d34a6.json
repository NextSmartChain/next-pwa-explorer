{"remainingRequest":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/websites/ex.nextsmartchain.com/src/data-tables/AddressDelegationList.vue?vue&type=script&lang=js&","dependencies":[{"path":"/mnt/websites/ex.nextsmartchain.com/src/data-tables/AddressDelegationList.vue","mtime":1657708591770},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/babel-loader/lib/index.js","mtime":1655491285588},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js","mtime":1655491106804},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js","mtime":1657708714280}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["AddressDelegationList.vue"],"names":[],"mappings":";AAmfile":"AddressDelegationList.vue","sourceRoot":"src/data-tables","sourcesContent":["<template>\n    <div class=\"address-delegation-list-dt\">\n        <template v-if=\"!delegationsByAddressError\">\n            <f-data-table\n                :columns=\"columns\"\n                :items=\"dItems\"\n                :disable-infinite-scroll=\"!hasNext\"\n                :mobile-view=\"mobileView\"\n                :loading=\"loading\"\n                first-m-v-column-width=\"5\"\n                infinite-scroll\n                fixed-header\n                class=\"f-data-table-body-bg-color\"\n                @fetch-more=\"fetchMore\"\n            >\n                <template v-slot:column-validator=\"{ value, item, column }\">\n                    <div v-if=\"column\" class=\"row no-collapse no-vert-col-padding\">\n                        <div class=\"col-5 f-row-label\">{{ column.label }}</div>\n                        <div class=\"col break-word\">\n                            <template v-if=\"value\">\n                                {{ value.stakerInfo && value.stakerInfo.name ? value.stakerInfo.name : 'Unknown' }},\n                                {{ value.id | formatHexToInt }}\n                            </template>\n                        </div>\n                    </div>\n                    <template v-else-if=\"value\">\n                        {{ value.stakerInfo && value.stakerInfo.name ? value.stakerInfo.name : 'Unknown' }},\n                        {{ value.id | formatHexToInt }}\n                    </template>\n                </template>\n\n                <template v-slot:column-amount=\"{ value, item, column }\">\n                    <div v-if=\"column\" class=\"row no-collapse no-vert-col-padding\">\n                        <div class=\"col-5 f-row-label\">{{ column.label }}</div>\n                        <div class=\"col break-word\">\n                            <f-token-value\n                                :value=\"value\"\n                                :decimals=\"2\"\n                                :use-placeholder=\"false\"\n                                no-currency\n                            />\n                        </div>\n                    </div>\n                    <template v-else>\n                        <f-token-value\n                            :value=\"value\"\n                            :decimals=\"2\"\n                            :use-placeholder=\"false\"\n                            no-currency\n                        />\n                    </template>\n                </template>\n\n                <template v-slot:column-rewards=\"{ value, item, column }\">\n                    <div v-if=\"column\" class=\"row no-collapse no-vert-col-padding\">\n                        <div class=\"col-5 f-row-label\">{{ column.label }}</div>\n                        <div class=\"col break-word\">\n                            <f-token-value\n                                :value=\"value\"\n                                :decimals=\"2\"\n                                :use-placeholder=\"false\"\n                                no-currency\n                            />\n                        </div>\n                    </div>\n                    <template v-else>\n                        <f-token-value\n                            :value=\"value\"\n                            :decimals=\"2\"\n                            :use-placeholder=\"false\"\n                            no-currency\n                        />\n                    </template>\n                </template>\n            </f-data-table>\n        </template>\n        <template v-else>\n            <div class=\"query-error\">{{ delegationsByAddressError }}</div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport FDataTable from '@/components/core/FDataTable/FDataTable.vue';\nimport gql from 'graphql-tag';\nimport { cloneObject } from '@/utils';\nimport { formatDate, formatHexToInt, timestampToDate } from '@/filters.js';\nimport { WEIToFTM } from '@/utils/transactions.js';\nimport FTokenValue from \"@/components/core/FTokenValue/FTokenValue.vue\";\n// import { formatHexToInt } from '@/filters.js';\n\nexport default {\n    name: 'AddressDelegationList',\n\n    components: {FTokenValue, FDataTable },\n\n    props: {\n        /** */\n        accountAddress: {\n            type: String,\n            default: '',\n            required: true,\n        },\n        /** Number of items per page. */\n        itemsPerPage: {\n            type: Number,\n            default: 25,\n        },\n    },\n\n    apollo: {\n        delegationsByAddress: {\n            query: gql`\n                query DelegationsByAddress($address: Address!, $cursor: Cursor, $count: Int!) {\n                    delegationsByAddress(address: $address, cursor: $cursor, count: $count) {\n                        pageInfo {\n                            first\n                            last\n                            hasNext\n                            hasPrevious\n                        }\n                        totalCount\n                        edges {\n                            cursor\n                            delegation {\n                                toStakerId\n                                createdTime\n                                amount\n                                isDelegationLocked\n                                lockedFromEpoch\n                                lockedUntil\n                                pendingRewards {\n                                    amount\n                                }\n                            }\n                        }\n                    }\n                }\n            `,\n            variables() {\n                return {\n                    address: this.accountAddress,\n                    count: this.itemsPerPage,\n                    cursor: null,\n                };\n            },\n            async result(_data, _key) {\n                let data;\n\n                if (_key === 'delegationsByAddress') {\n                    data = cloneObject(_data.data.delegationsByAddress);\n\n                    const edges = data.edges;\n\n                    if (edges && edges.length > 0 && edges[0].id && this.dItems.length > 0) {\n                        return;\n                    }\n\n                    this.hasNext = data.pageInfo.hasNext;\n\n                    if (this.dItems.length === 0) {\n                        this.dItems = edges;\n                    } else {\n                        for (let i = 0, len1 = edges.length; i < len1; i++) {\n                            this.dItems.push(edges[i]);\n                        }\n                    }\n\n                    this.totalCount = data.totalCount;\n                    this.$emit('records-count', formatHexToInt(this.totalCount));\n\n                    const stakers = await this.fetchStakers();\n                    if (stakers && stakers.length > 0) {\n                        // data.edges[0].delegation._validator = 'werwer';\n                        edges.forEach((_item) => {\n                            _item.delegation = {\n                                ..._item.delegation,\n                                _validator: stakers.find((_staker) => _staker.id === _item.delegation.toStakerId),\n                            };\n                        });\n                    }\n                }\n            },\n            error(_error) {\n                this.delegationsByAddressError = _error.message;\n            },\n        },\n    },\n\n    data() {\n        return {\n            columns: [\n                {\n                    name: 'createdTime',\n                    label: 'Delegation Time',\n                    itemProp: 'delegation.createdTime',\n                    formatter: (_value) => formatDate(timestampToDate(_value), true, true),\n                },\n                {\n                    name: 'validator',\n                    label: 'Validator',\n                    itemProp: 'delegation._validator',\n                    // formatter: (_value, _item) => _item._validator,\n                    width: '150px',\n                },\n                {\n                    name: 'amount',\n                    label: 'Amount (NEXT)',\n                    itemProp: 'delegation.amount',\n                    formatter: (_value) => WEIToFTM(_value),\n                    width: '160px',\n                    cssClass: 'align-end',\n                },\n                {\n                    name: 'rewards',\n                    label: 'Pending Rewards (NEXT)',\n                    itemProp: 'delegation.pendingRewards',\n                    formatter: (_value) => (_value ? WEIToFTM(_value.amount) : '-'),\n                    width: '200px',\n                    cssClass: 'align-end',\n                },\n                {\n                    name: '',\n                    label: 'Expiration Time',\n                    itemProp: 'delegation.lockedUntil',\n                    formatter: (_value) => formatDate(timestampToDate(_value), true, true) || '-',\n                },\n            ],\n            dItems: [],\n            hasNext: false,\n            delegationsByAddressError: '',\n            totalCount: 0,\n        };\n    },\n\n    computed: {\n        /**\n         * Property is set to `true`, if 'account-transaction-list-dt-mobile-view' breakpoint is reached.\n         *\n         * @return {Boolean}\n         */\n        mobileView() {\n            const dataTableBreakpoint = this.$store.state.breakpoints['transaction-list-dt-mobile-view'];\n\n            return dataTableBreakpoint && dataTableBreakpoint.matches;\n        },\n\n        loading() {\n            return this.$apollo.queries.delegationsByAddress.loading;\n        },\n    },\n\n    watch: {\n        accountAddress() {\n            this.dItems = [];\n        },\n    },\n\n    methods: {\n        async fetchStakers() {\n            const data = await this.$apollo.query({\n                query: gql`\n                    query Stakers {\n                        stakers {\n                            id\n                            stakerAddress\n                            stakerInfo {\n                                name\n                                website\n                                contact\n                                logoUrl\n                            }\n                        }\n                    }\n                `,\n                fetchPolicy: 'network-only',\n            });\n\n            return data.data.stakers;\n        },\n\n        fetchMore() {\n            const { delegationsByAddress } = this;\n\n            if (delegationsByAddress && delegationsByAddress.pageInfo && delegationsByAddress.pageInfo.hasNext) {\n                const cursor = delegationsByAddress.pageInfo.last;\n\n                this.$apollo.queries.delegationsByAddress.fetchMore({\n                    variables: {\n                        cursor,\n                        count: this.itemsPerPage,\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                        return fetchMoreResult;\n                    },\n                });\n            }\n        },\n    },\n};\n</script>\n"]}]}