{"remainingRequest":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/websites/ex.nextsmartchain.com/src/components/core/FTokenValue/FTokenValue.vue?vue&type=style&index=0&id=70dc5efe&prod&lang=scss&","dependencies":[{"path":"/mnt/websites/ex.nextsmartchain.com/src/components/core/FTokenValue/FTokenValue.vue","mtime":1657708591978},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/css-loader/dist/cjs.js","mtime":1655491291170},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1657708714280},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/postcss-loader/src/index.js","mtime":1655491291810},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/sass-loader/dist/cjs.js","mtime":1657625857833},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js","mtime":1655491106804},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js","mtime":1657708714280}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CkBpbXBvcnQgJ3N0eWxlJzsK"},{"version":3,"sources":["FTokenValue.vue"],"names":[],"mappings":";AAoJA","file":"FTokenValue.vue","sourceRoot":"src/components/core/FTokenValue","sourcesContent":["<template>\n    <span class=\"f-token-value\" :title=\"cValue\">\n        <f-placeholder\n            v-if=\"usePlaceholder\"\n            :content-loaded=\"!!token.symbol || contentLoaded\"\n            :replacement-text=\"replacementText\"\n        >\n            <span class=\"f-token-value__value\">\n                {{ tokenValue }}<span v-if=\"showDots\" class=\"f-token-value__dots\">&#8230;</span>\n            </span>\n            <span v-if=\"!noCurrency\" class=\"currency\">{{ tokenSymbol }}</span>\n        </f-placeholder>\n        <template v-else>\n            <span class=\"f-token-value__value\">\n                {{ tokenValue }}<span v-if=\"showDots\" class=\"f-token-value__dots\">&#8230;</span>\n            </span>\n            <span v-if=\"!noCurrency\" class=\"currency\">{{ tokenSymbol }}</span>\n        </template>\n    </span>\n</template>\n\n<script>\nimport { formatNumberByLocale } from '@/filters.js';\nimport FPlaceholder from '@/components/core/FPlaceholder/FPlaceholder.vue';\n\nexport default {\n    name: 'FTokenValue',\n\n    components: { FPlaceholder },\n\n    props: {\n        /** @type {DefiToken} */\n        token: {\n            type: Object,\n            default() {\n                return {};\n            },\n            // required: true,\n        },\n        /** Token's value. */\n        value: {\n            type: [Number, String],\n            default: 0,\n        },\n        convertValue: {\n            type: Boolean,\n            default: false,\n        },\n        /** Hide currency. */\n        noCurrency: {\n            type: Boolean,\n            default: false,\n        },\n        /** Use FPlaceholder. */\n        usePlaceholder: {\n            type: Boolean,\n            default: true,\n        },\n        /** Determines whether the content is loaded or not. */\n        contentLoaded: {\n            type: Boolean,\n            default: false,\n        },\n        /** Replacement text for FPlaceholder. */\n        replacementText: {\n            type: String,\n            default: '10,000.00 NEXT',\n        },\n        /** Currency symbol used in `formatNumberByLocale` function */\n        numberCurrency: {\n            type: String,\n            default: '',\n        },\n        /** Number of decimal places. If not set (-1), token decimal places will be taken. */\n        decimals: {\n            type: Number,\n            default: -1,\n        },\n        maxDecimals: {\n            type: Number,\n            default: 0,\n        },\n        /** Add this number of decimals to default token decimals. */\n        addDecimals: {\n            type: Number,\n            default: 0,\n        },\n    },\n\n    computed: {\n        tokenSymbol() {\n            return this.$defi.getTokenSymbol(this.token);\n        },\n\n        tokenValue() {\n            return this.formatTokenValue(this.cValue);\n        },\n\n        cDecimals() {\n            const { maxDecimals } = this;\n            const decimals =\n                this.decimals > -1 ? this.decimals : this.$defi.getTokenDecimals(this.token) + this.addDecimals;\n\n            return maxDecimals > 0 && decimals > maxDecimals ? maxDecimals : decimals;\n        },\n\n        cValue() {\n            let value = this.value;\n\n            if (this.convertValue) {\n                value = this.$defi.fromTokenValue(this.value, this.token);\n            }\n\n            return value;\n        },\n\n        showDots() {\n            const { cDecimals } = this;\n\n            if (cDecimals > 0) {\n                const fValue = parseFloat(this.cValue);\n                const tfValue = fValue.toFixed(cDecimals);\n                const ftfValue = parseFloat(tfValue);\n\n                if (fValue !== ftfValue) {\n                    const spl = tfValue.split('.');\n\n                    return spl.length === 2 && parseInt(spl[1]) === 0;\n                }\n            }\n\n            return false;\n        },\n    },\n\n    methods: {\n        formatTokenValue(_value) {\n            const { cDecimals } = this;\n\n            return _value === 0\n                ? 0\n                : formatNumberByLocale(parseFloat(_value).toFixed(cDecimals), cDecimals, this.numberCurrency);\n        },\n    },\n};\n</script>\n\n<style lang=\"scss\">\n@import 'style';\n</style>\n"]}]}