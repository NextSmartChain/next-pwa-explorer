{"remainingRequest":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/websites/ex.nextsmartchain.com/src/data-tables/FContractList.vue?vue&type=style&index=0&id=68984962&prod&lang=scss&","dependencies":[{"path":"/mnt/websites/ex.nextsmartchain.com/src/data-tables/FContractList.vue","mtime":1657708591538},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/css-loader/dist/cjs.js","mtime":1655491291170},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1657708714280},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/postcss-loader/src/index.js","mtime":1655491291810},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/sass-loader/dist/cjs.js","mtime":1657625857833},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js","mtime":1655491106804},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js","mtime":1657708714280}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jb250cmFjdC1saXN0LWR0IHsKICAgIC5jb250cmFjdC1uYW1lIHsKICAgICAgICBkaXNwbGF5OiBibG9jazsKICAgICAgICBwYWRkaW5nLXRvcDogNHB4OwogICAgfQp9Cg=="},{"version":3,"sources":["FContractList.vue"],"names":[],"mappings":";AAkNA;AACA;AACA;AACA;AACA;AACA","file":"FContractList.vue","sourceRoot":"src/data-tables","sourcesContent":["<template>\n    <div class=\"contract-list-dt\">\n        <template v-if=\"!dContractListError\">\n            <f-data-table\n                :columns=\"dColumns\"\n                :items=\"dItems\"\n                :disable-infinite-scroll=\"!dHasNext\"\n                :loading=\"cLoading\"\n                :mobile-view=\"cMobileView\"\n                infinite-scroll\n                fixed-header\n                class=\"f-data-table-body-bg-color\"\n                @fetch-more=\"fetchMore\"\n            >\n                <template v-slot:column-addressname=\"{ value, column }\">\n                    <div v-if=\"column\" class=\"row no-collapse no-vert-col-padding\">\n                        <div class=\"col-4 f-row-label\">{{ column.label }}</div>\n                        <div class=\"col-8\">\n                            <router-link :to=\"{name: 'address-detail', params: {id: value.address}}\" :title=\"value.address\">\n                                <f-ellipsis :text=\"value.address\" overflow=\"middle\" />\n                            </router-link>\n                            <span class=\"contract-name\">{{ value.name }}</span>\n                        </div>\n                    </div>\n                    <template v-else>\n                        <router-link :to=\"{name: 'address-detail', params: {id: value.address}}\" :title=\"value.address\">\n                            <f-ellipsis :text=\"value.address\" overflow=\"middle\" />\n                        </router-link>\n                        <span class=\"contract-name\">{{ value.name }}</span>\n                    </template>\n                </template>\n            </f-data-table>\n        </template>\n\n        <template v-else>\n            <div class=\"query-error\">{{ dContractListError }}</div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport FDataTable from \"../components/core/FDataTable/FDataTable.vue\";\nimport gql from \"graphql-tag\";\nimport { WEIToFTM } from \"../utils/transactions.js\";\nimport {timestampToDate, formatHexToInt, formatDate} from \"../filters.js\";\nimport FEllipsis from \"../components/core/FEllipsis/FEllipsis.vue\";\nimport {cloneObject} from \"@/utils\";\n\nexport default {\n    name: \"FContractList\",\n\n    components: {\n        FEllipsis,\n        FDataTable\n    },\n\n    props: {\n        /** Number of items per page. */\n        itemsPerPage: {\n            type: Number,\n            default: 40\n        }\n    },\n\n    apollo: {\n        contracts: {\n            query: gql`\n                query ContractList($cursor: Cursor, $count: Int!) {\n                    contracts(cursor: $cursor, count: $count) {\n                        totalCount\n                        pageInfo {\n                            first\n                            last\n                            hasNext\n                            hasPrevious\n                        }\n                        edges {\n                            contract {\n                                address\n                                deployedBy {\n                                    hash\n                                }\n                                transactionHash\n                                name\n                                version\n                                compiler\n                                validated\n                                timestamp\n                            }\n                            cursor\n                        }\n                    }\n                }\n            `,\n            variables() {\n                return {\n                    cursor: null,\n                    count: this.itemsPerPage\n                };\n            },\n            result(_data, _key) {\n                let data;\n\n                if (_key === \"contracts\") {\n                    // console.log('???');\n                    data = _data.data.contracts;\n\n                    const edges = cloneObject(data.edges);\n\n                    this.dHasNext = data.pageInfo.hasNext;\n\n                    if (this.dItems.length === 0) {\n                        this.dItems = edges;\n                    } else {\n                        for (let i = 0, len1 = edges.length; i < len1; i++) {\n                            this.dItems.push(edges[i]);\n                        }\n                    }\n\n                    this.$emit(\n                        \"records-count\",\n                        formatHexToInt(data.totalCount)\n                    );\n                }\n            },\n            error(_error) {\n                this.dContractListError = _error.message;\n            }\n        }\n    },\n\n    data() {\n        return {\n            dItems: [],\n            dHasNext: false,\n            dContractListError: \"\",\n            dColumns: [\n                {\n                    name: \"addressname\",\n                    label: `${this.$t(\"view_contract_list.address\")} / ${this.$t(\"view_contract_list.name\")}`,\n                    itemProp: \"contract\",\n                    width: '400px',\n                },\n                {\n                    name: \"validated\",\n                    label: this.$t(\"view_contract_list.validated\"),\n                    itemProp: \"contract.validated\",\n                    formatter: (_value) => formatDate(timestampToDate(_value)),\n                },\n                {\n                    name: \"timestamp\",\n                    label: this.$t(\"view_contract_list.timestamp\"),\n                    itemProp: \"contract.timestamp\",\n                    formatter: (_value) => formatDate(timestampToDate(_value)),\n                },\n            ]\n        };\n    },\n\n    computed: {\n        /**\n         * Property is set to `true`, if 'contract-list-dt-mobile-view' breakpoint is reached.\n         *\n         * @return {Boolean}\n         */\n        cMobileView() {\n            const dataTableBreakpoint = this.$store.state.breakpoints['contract-list-dt-mobile-view'];\n\n            return (dataTableBreakpoint && dataTableBreakpoint.matches);\n        },\n\n        cLoading() {\n            return this.$apollo.queries.contracts.loading;\n        }\n    },\n\n    methods: {\n        fetchMore() {\n            const { contracts } = this;\n\n            if (contracts && contracts.pageInfo && contracts.pageInfo.hasNext) {\n                const cursor = contracts.pageInfo.last;\n\n                this.$apollo.queries.contracts.fetchMore({\n                    variables: {\n                        cursor,\n                        count: this.itemsPerPage\n                    },\n                    updateQuery: (previousResult, { fetchMoreResult }) => {\n                        return fetchMoreResult;\n                    }\n                });\n            }\n        },\n\n        WEIToFTM,\n        timestampToDate\n    }\n};\n</script>\n\n<style lang=\"scss\">\n    .contract-list-dt {\n        .contract-name {\n            display: block;\n            padding-top: 4px;\n        }\n    }\n</style>\n"]}]}