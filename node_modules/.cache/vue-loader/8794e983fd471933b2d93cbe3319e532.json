{"remainingRequest":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/websites/ex.nextsmartchain.com/src/components/TransactionVolumes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/mnt/websites/ex.nextsmartchain.com/src/components/TransactionVolumes.vue","mtime":1657708593166},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/babel-loader/lib/index.js","mtime":1655491285588},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js","mtime":1655491106804},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js","mtime":1657708714280}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CmltcG9ydCBGTGlnaHR3ZWlnaHRDaGFydHMgZnJvbSAiQC9jb21wb25lbnRzL2NvcmUvRkxpZ2h0d2VpZ2h0Q2hhcnRzL0ZMaWdodHdlaWdodENoYXJ0cy52dWUiOwppbXBvcnQgZGF5anMgZnJvbSAiZGF5anMiOwppbXBvcnQge2dldERheWpzVW5pdEJ5U2hvcnRjdXQsIHBhcnNlVGltZUNvZGV9IGZyb20gIkAvdXRpbHMvdGltZS5qcyI7CmltcG9ydCBncWwgZnJvbSAiZ3JhcGhxbC10YWciOwoKZXhwb3J0IGRlZmF1bHQgewogICAgbmFtZTogIlRyYW5zYWN0aW9uVm9sdW1lcyIsCgogICAgY29tcG9uZW50czoge0ZMaWdodHdlaWdodENoYXJ0c30sCgogICAgcHJvcHM6IHsKICAgICAgICByZXNvbHV0aW9uOiB7CiAgICAgICAgICAgIHR5cGU6IFN0cmluZywKICAgICAgICAgICAgZGVmYXVsdDogJzE0ZCcsCiAgICAgICAgfQogICAgfSwKCiAgICBkYXRhKCkgewogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIHR4Vm9sdW1lU2VyaWVzOiBbXSwKICAgICAgICB9CiAgICB9LAoKICAgIHdhdGNoOiB7CiAgICAgICAgcmVzb2x1dGlvbjogewogICAgICAgICAgICBoYW5kbGVyKF92YWx1ZSkgewogICAgICAgICAgICAgICAgdGhpcy5sb2FkVHhWb2x1bWVzKHRoaXMuZ2V0YXRlQnlUaW1lY29kZShfdmFsdWUpKTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlLAogICAgICAgIH0KICAgIH0sCgogICAgbWV0aG9kczogewogICAgICAgIC8qKgogICAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbX3RpbWVDb2RlXQogICAgICAgICAqIHJldHVybiB7c3RyaW5nfSBEYXRlIGluIGBZWVlZLU1NLUREYCBmb3JtYXQuCiAgICAgICAgICovCiAgICAgICAgZ2V0YXRlQnlUaW1lY29kZShfdGltZUNvZGUgPSAnMXknKSB7CiAgICAgICAgICAgIGNvbnN0IG5vdyA9IGRheWpzKCkudXRjKCk7CiAgICAgICAgICAgIGNvbnN0IHRpbWVDb2RlID0gcGFyc2VUaW1lQ29kZShfdGltZUNvZGUpOwoKICAgICAgICAgICAgcmV0dXJuIG5vdy5zdWJ0cmFjdCh0aW1lQ29kZS52YWx1ZSwgZ2V0RGF5anNVbml0QnlTaG9ydGN1dCh0aW1lQ29kZS51bml0KSkuZm9ybWF0KCdZWVlZLU1NLUREJyk7CiAgICAgICAgfSwKCiAgICAgICAgYXN5bmMgbG9hZFR4Vm9sdW1lcyhfZnJvbSA9IG51bGwsIF90byA9IG51bGwpIHsKICAgICAgICAgICAgY29uc3QgdHhWb2x1bWVzID0gYXdhaXQgdGhpcy5mZXRjaFR4Vm9sdW1lcyhfZnJvbSwgX3RvKTsKCiAgICAgICAgICAgIHRoaXMudHhWb2x1bWVTZXJpZXMgPSB0eFZvbHVtZXMubWFwKChfaXRlbSkgPT4gewogICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICB0aW1lOiBfaXRlbS5kYXksCiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF9pdGVtLnZvbHVtZSwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIGFzeW5jIGZldGNoVHhWb2x1bWVzKF9mcm9tID0gbnVsbCwgX3RvID0gbnVsbCkgewogICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy4kYXBvbGxvLnF1ZXJ5KHsKICAgICAgICAgICAgICAgIHF1ZXJ5OiBncWxgCiAgICAgICAgICAgICAgICAgICAgcXVlcnkgVHhWb2x1bWVzKCRmcm9tOlN0cmluZywgJHRvOlN0cmluZykgewogICAgICAgICAgICAgICAgICAgICAgICB0cnhWb2x1bWUoZnJvbTogJGZyb20sIHRvOiAkdG8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRheQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWUKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGAsCiAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHsKICAgICAgICAgICAgICAgICAgICBmcm9tOiBfZnJvbSwKICAgICAgICAgICAgICAgICAgICB0bzogX3RvLAogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIGZldGNoUG9saWN5OiAnbmV0d29yay1vbmx5JywKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICByZXR1cm4gZGF0YS5kYXRhLnRyeFZvbHVtZSB8fCBbXTsKICAgICAgICB9LAoKICAgIH0KfQo="},{"version":3,"sources":["TransactionVolumes.vue"],"names":[],"mappings":";AAyBA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA","file":"TransactionVolumes.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <div class=\"transactionvolumes\">\n        <f-lightweight-charts\n            :series=\"txVolumeSeries\"\n            series-type=\"area\"\n            __time-to-timestamp\n            :fit-content=\"true\"\n            :height=\"280\"\n            :options=\"{ handleScroll: false,handleScale: false }\"\n        />\n        <!--                    <f-lightweight-charts\n            ref=\"chart\"\n            :series=\"txVolumeSeries\"\n            series-type=\"histogram\"\n            :series-options=\"{ priceFormat: { type: 'volume' } }\"\n            __transform-values=\"to-eth\"\n            time-to-timestamp\n            :height=\"280\"\n            :options=\"{handleScroll: true,handleScale: true }\"\n        />-->\n\n    </div>\n</template>\n\n<script>\nimport FLightweightCharts from \"@/components/core/FLightweightCharts/FLightweightCharts.vue\";\nimport dayjs from \"dayjs\";\nimport {getDayjsUnitByShortcut, parseTimeCode} from \"@/utils/time.js\";\nimport gql from \"graphql-tag\";\n\nexport default {\n    name: \"TransactionVolumes\",\n\n    components: {FLightweightCharts},\n\n    props: {\n        resolution: {\n            type: String,\n            default: '14d',\n        }\n    },\n\n    data() {\n        return {\n            txVolumeSeries: [],\n        }\n    },\n\n    watch: {\n        resolution: {\n            handler(_value) {\n                this.loadTxVolumes(this.getateByTimecode(_value));\n            },\n            immediate: true,\n        }\n    },\n\n    methods: {\n        /**\n         * @param {string} [_timeCode]\n         * return {string} Date in `YYYY-MM-DD` format.\n         */\n        getateByTimecode(_timeCode = '1y') {\n            const now = dayjs().utc();\n            const timeCode = parseTimeCode(_timeCode);\n\n            return now.subtract(timeCode.value, getDayjsUnitByShortcut(timeCode.unit)).format('YYYY-MM-DD');\n        },\n\n        async loadTxVolumes(_from = null, _to = null) {\n            const txVolumes = await this.fetchTxVolumes(_from, _to);\n\n            this.txVolumeSeries = txVolumes.map((_item) => {\n                return {\n                    time: _item.day,\n                    value: _item.volume,\n                };\n            });\n        },\n\n        async fetchTxVolumes(_from = null, _to = null) {\n            const data = await this.$apollo.query({\n                query: gql`\n                    query TxVolumes($from:String, $to:String) {\n                        trxVolume(from: $from, to: $to) {\n                            day\n                            amount\n                            volume\n                        }\n                    }\n                `,\n                variables: {\n                    from: _from,\n                    to: _to,\n                },\n                fetchPolicy: 'network-only',\n            });\n\n            return data.data.trxVolume || [];\n        },\n\n    }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}