{"remainingRequest":"/mnt/websites/ex.nextsmartchain.com/node_modules/thread-loader/dist/cjs.js!/mnt/websites/ex.nextsmartchain.com/node_modules/babel-loader/lib/index.js!/mnt/websites/ex.nextsmartchain.com/node_modules/eslint-loader/index.js??ref--14-0!/mnt/websites/ex.nextsmartchain.com/src/plugins/defi/defi.js","dependencies":[{"path":"/mnt/websites/ex.nextsmartchain.com/src/plugins/defi/defi.js","mtime":1657708590606},{"path":"/mnt/websites/ex.nextsmartchain.com/babel.config.js","mtime":1657708595230},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js","mtime":1655491106804},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/thread-loader/dist/cjs.js","mtime":1655491285854},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/babel-loader/lib/index.js","mtime":1655491285588},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/eslint-loader/index.js","mtime":1655491290241}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwgZnJvbSAiL21udC93ZWJzaXRlcy9leC5uZXh0c21hcnRjaGFpbi5jb20vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbC5qcyI7CmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gIi9tbnQvd2Vic2l0ZXMvZXgubmV4dHNtYXJ0Y2hhaW4uY29tL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL21udC93ZWJzaXRlcy9leC5uZXh0c21hcnRjaGFpbi5jb20vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgX2NsYXNzQ2FsbENoZWNrIGZyb20gIi9tbnQvd2Vic2l0ZXMvZXgubmV4dHNtYXJ0Y2hhaW4uY29tL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jbGFzc0NhbGxDaGVjay5qcyI7CmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSAiL21udC93ZWJzaXRlcy9leC5uZXh0c21hcnRjaGFpbi5jb20vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIjsKCnZhciBfdGVtcGxhdGVPYmplY3QsIF90ZW1wbGF0ZU9iamVjdDIsIF90ZW1wbGF0ZU9iamVjdDMsIF90ZW1wbGF0ZU9iamVjdDQsIF90ZW1wbGF0ZU9iamVjdDUsIF90ZW1wbGF0ZU9iamVjdDYsIF90ZW1wbGF0ZU9iamVjdDcsIF90ZW1wbGF0ZU9iamVjdDgsIF90ZW1wbGF0ZU9iamVjdDksIF90ZW1wbGF0ZU9iamVjdDEwOwoKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnN1Yi5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LnNsaWNlLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLnRvLWZpeGVkLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmlsdGVyLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAnLi9kZWZpLnR5cGVzLmpzJzsKaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZyc7CmltcG9ydCB7IGNsb25lT2JqZWN0LCBpc09iamVjdEVtcHR5LCBsb3dlcmNhc2VGaXJzdENoYXIgfSBmcm9tICcuLi8uLi91dGlscyc7CmltcG9ydCB3ZWIzdXRpbHMgZnJvbSAnd2ViMy11dGlscyc7CmltcG9ydCB7IGZGZXRjaCB9IGZyb20gJy4uL2ZmZXRjaC5qcyc7Ci8qKiBAdHlwZSB7Qk5CcmlkZ2VFeGNoYW5nZX0gKi8KCmV4cG9ydCB2YXIgZGVmaSA9IG51bGw7Ci8qKiBNYXhpbXVtIG51bWJlciBvZiB0b2tlbiBkZWNpbWFsIHBsYWNlcyB0byBiZSBkaXNwbGF5ZWQgaW4gdGFibGVzLiAqLwoKZXhwb3J0IHZhciBNQVhfVE9LRU5fREVDSU1BTFNfSU5fVEFCTEVTID0gMjsgLy8gVE1QISEKCnZhciBmaWx0ZXJUb2tlbnMgPSBbXTsKLyoqCiAqIFBsdWdpbiBmb3IgdmFyaW91cyBEZUZpIHJlcXVlc3RzIGFuZCBjYWxjdWxhdGlvbnMuCiAqLwoKZXhwb3J0IHZhciBEZUZpID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHsKICAvKioKICAgKiBAcGFyYW0ge3thcG9sbG9DbGllbnQ6IEFwb2xsb0NsaWVudH19IF9vcHRpb25zCiAgICovCiAgZnVuY3Rpb24gRGVGaShfb3B0aW9ucykgewogICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlRmkpOwoKICAgIHRoaXMuYXBvbGxvQ2xpZW50ID0gX29wdGlvbnMuYXBvbGxvQ2xpZW50OwogICAgLyoqIExpcXVpZGF0aW9uIGNvbGxhdGVyYWwgcmF0aW8uICovCgogICAgdGhpcy5saXFDb2xsYXRlcmFsUmF0aW8gPSAxLjU7CiAgICAvKiogTWluaW1hbCBjb2xsYXRlcmFsIHJhdGlvLiAqLwoKICAgIHRoaXMubWluQ29sbGF0ZXJhbFJhdGlvID0gMzsKICAgIC8qKiBXYXJuaW5nIGNvbGxhdGVyYWwgcmF0aW8uICovCgogICAgdGhpcy53YXJuaW5nQ29sbGF0ZXJhbFJhdGlvID0gMi4yNTsgLy8gKHRoaXMubGlxQ29sbGF0ZXJhbFJhdGlvICsgdGhpcy5taW5Db2xsYXRlcmFsUmF0aW8pIC8gMjsKCiAgICB0aGlzLnJld2FyZENvbGxhdGVyYWxSYXRpbyA9IDU7CiAgICB0aGlzLm1pbnRGZWUgPSAwLjAwMjU7CiAgICAvKiogRGVGaSBzZXR0aW5ncyB3YXMgbG9hZGVkLiAqLwoKICAgIHRoaXMuc2V0dGluZ3NMb2FkZWQgPSBmYWxzZTsKICAgIC8qKiBAdHlwZSB7RGVmaVRva2VuW119ICovCgogICAgdGhpcy50b2tlbnMgPSBbXTsKICAgIC8qKiBAdHlwZSB7RGVmaVRva2VufSAqLwoKICAgIHRoaXMuZnVzZFRva2VuID0ge307CiAgICAvKiogQHR5cGUge0RlZmlUb2tlbn0gKi8KCiAgICB0aGlzLmZ0bVRva2VuID0ge307CiAgICAvKiogS2V5cyBhcmUgdG9rZW4gc3ltYm9scywgdmFsdWVzIGFyZSBudW1iZXIgb2YgZGVjaW1hbHMuICovCgogICAgdGhpcy50b2tlbkRlY2ltYWxzID0ge307CiAgICAvKiogQWRkcmVzc2VzIG9mIHZhcmlvdXMgY29udHJhY3RzLiAqLwoKICAgIHRoaXMuY29udHJhY3RzID0gewogICAgICBmTWludDogJycsCiAgICAgIGZNaW50UmV3YXJkOiAnJywKICAgICAgdW5pc3dhcENvcmVGYWN0b3J5OiAnJywKICAgICAgdW5pc3dhcFJvdXRlcjogJycKICAgIH07CiAgfQogIC8qKgogICAqIExvYWQgc2V0dGluZ3MgaWYgaXQncyBuZWNlc3NhcnkuCiAgICoKICAgKiBAcmV0dXJuIHtQcm9taXNlfQogICAqLwoKCiAgX2NyZWF0ZUNsYXNzKERlRmksIFt7CiAgICBrZXk6ICJpbml0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfaW5pdCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZXR0aW5nc0xvYWRlZCkgewogICAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgdGhpcy5zZXR0aW5nc0xvYWRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IHRoaXM7CiAgICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNTsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZldGNoU2V0dGluZ3MoKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgX2NvbnRleHQudDEgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICAgIF9jb250ZXh0LnQwLmluaXRQcm9wZXJ0aWVzLmNhbGwoX2NvbnRleHQudDAsIF9jb250ZXh0LnQxKTsKCiAgICAgICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGluaXQoKSB7CiAgICAgICAgcmV0dXJuIF9pbml0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBpbml0OwogICAgfSgpCiAgICAvKioKICAgICAqIFNldCBwcm9wZXJ0aWVzLgogICAgICoKICAgICAqIEBwYXJhbSB7RGVmaVNldHRpbmdzfSBfc2V0dGluZ3MKICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJpbml0UHJvcGVydGllcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdFByb3BlcnRpZXMoX3NldHRpbmdzKSB7CiAgICAgIHZhciBkZWMgPSBNYXRoLnBvdygxMCwgX3NldHRpbmdzLmRlY2ltYWxzKTsKICAgICAgdmFyIGNvbnRyYWN0cyA9IHRoaXMuY29udHJhY3RzOyAvLyB0aGlzLmxpcUNvbGxhdGVyYWxSYXRpbyA9IHBhcnNlSW50KF9zZXR0aW5ncy5saXFDb2xsYXRlcmFsUmF0aW80LCAxNikgLyBkZWM7CgogICAgICB0aGlzLm1pbkNvbGxhdGVyYWxSYXRpbyA9IHBhcnNlSW50KF9zZXR0aW5ncy5taW5Db2xsYXRlcmFsUmF0aW80LCAxNikgLyBkZWM7CiAgICAgIHRoaXMucmV3YXJkQ29sbGF0ZXJhbFJhdGlvID0gcGFyc2VJbnQoX3NldHRpbmdzLnJld2FyZENvbGxhdGVyYWxSYXRpbzQsIDE2KSAvIGRlYzsgLy8gdGhpcy53YXJuaW5nQ29sbGF0ZXJhbFJhdGlvID0gcGFyc2VJbnQoX3NldHRpbmdzLndhcm5pbmdDb2xsYXRlcmFsUmF0aW80LCAxNikgLyBkZWM7CgogICAgICB0aGlzLm1pbnRGZWUgPSBwYXJzZUludChfc2V0dGluZ3MubWludEZlZTQsIDE2KSAvIGRlYzsKICAgICAgY29udHJhY3RzLmZNaW50ID0gX3NldHRpbmdzLmZNaW50Q29udHJhY3Q7CiAgICAgIGNvbnRyYWN0cy5mTWludFJld2FyZCA9IF9zZXR0aW5ncy5mTWludFJld2FyZERpc3RyaWJ1dGlvbjsKICAgICAgY29udHJhY3RzLnVuaXN3YXBDb3JlRmFjdG9yeSA9IF9zZXR0aW5ncy51bmlzd2FwQ29yZUZhY3Rvcnk7CiAgICAgIGNvbnRyYWN0cy51bmlzd2FwUm91dGVyID0gX3NldHRpbmdzLnVuaXN3YXBSb3V0ZXI7CiAgICB9CiAgICAvKioKICAgICAqIEBwYXJhbSB7RGVmaVRva2VuW119IF90b2tlbnMKICAgICAqIEBwcml2YXRlCiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiX3NldFRva2VucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gX3NldFRva2VucyhfdG9rZW5zKSB7CiAgICAgIHRoaXMudG9rZW5zID0gX3Rva2VuczsKICAgICAgdGhpcy5mdXNkVG9rZW4gPSBfdG9rZW5zLmZpbmQoZnVuY3Rpb24gKF9pdGVtKSB7CiAgICAgICAgcmV0dXJuIF9pdGVtLnN5bWJvbCA9PT0gJ0ZVU0QnOwogICAgICB9KTsKICAgICAgdGhpcy5mdG1Ub2tlbiA9IF90b2tlbnMuZmluZChmdW5jdGlvbiAoX2l0ZW0pIHsKICAgICAgICByZXR1cm4gX2l0ZW0uc3ltYm9sID09PSAnTkVYVCc7CiAgICAgIH0pOwogICAgICAvKgogICAgICBpZiAoaXNPYmplY3RFbXB0eSh0aGlzLnRva2VuRGVjaW1hbHMpKSB7CiAgICAgICAgICB0aGlzLnRva2Vucy5mb3JFYWNoKChfdG9rZW4pID0+IHsKICAgICAgICAgICAgICB0aGlzLl9zZXRUb2tlbkRlY2ltYWxzKF90b2tlbik7CiAgICAgICAgICB9KTsKICAgICAgfQogICAgICAqLwogICAgfQogICAgLyoqCiAgICAgKiBAcGFyYW0ge0RlZmlUb2tlbn0gX3Rva2VuCiAgICAgKiBAcHJpdmF0ZQogICAgICovCgogICAgLyoKICAgIF9zZXRUb2tlbkRlY2ltYWxzKF90b2tlbikgewogICAgICAgIGNvbnN0IHRva2VuUHJpY2UgPSB0aGlzLmdldFRva2VuUHJpY2UoX3Rva2VuKTsKICAgICAgICBsZXQgZGVjaW1hbHMgPSAwOwogICAgICAgICBpZiAodG9rZW5QcmljZSA9PT0gMCkgewogICAgICAgICAgICBkZWNpbWFscyA9IDY7CiAgICAgICAgfSBlbHNlIGlmICh0b2tlblByaWNlIDwgMC41KSB7CiAgICAgICAgICAgIGRlY2ltYWxzID0gMTsKICAgICAgICB9IGVsc2UgaWYgKHRva2VuUHJpY2UgPCAxMDApIHsKICAgICAgICAgICAgZGVjaW1hbHMgPSAyOwogICAgICAgIH0gZWxzZSBpZiAodG9rZW5QcmljZSA8IDEwMDApIHsKICAgICAgICAgICAgZGVjaW1hbHMgPSA1OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGRlY2ltYWxzID0gNjsKICAgICAgICB9CiAgICAgICAgIHRoaXMudG9rZW5EZWNpbWFsc1tfdG9rZW4uc3ltYm9sXSA9IGRlY2ltYWxzOwogICAgfQogICAgKi8KCiAgICAvKioKICAgICAqIEBwYXJhbSB7RGVmaVRva2VufSBfdG9rZW4KICAgICAqIEBwYXJhbSB7bnVtYmVyfSBfZGVmYXVsdAogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldFRva2VuRGVjaW1hbHMiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRva2VuRGVjaW1hbHMoX3Rva2VuKSB7CiAgICAgIHZhciBfZGVmYXVsdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNjsKCiAgICAgIHZhciB0b2tlblByaWNlID0gdGhpcy5nZXRUb2tlblByaWNlKF90b2tlbik7CiAgICAgIHZhciBkZWNpbWFscyA9IF9kZWZhdWx0OwoKICAgICAgaWYgKHRva2VuUHJpY2UgPCAwLjUgJiYgdG9rZW5QcmljZSA+IDApIHsKICAgICAgICBkZWNpbWFscyA9IDE7CiAgICAgIH0gZWxzZSBpZiAodG9rZW5QcmljZSA8IDEwMCkgewogICAgICAgIGRlY2ltYWxzID0gMjsKICAgICAgfSBlbHNlIGlmICh0b2tlblByaWNlIDwgMTAwMCkgewogICAgICAgIGRlY2ltYWxzID0gNTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRlY2ltYWxzOyAvLyByZXR1cm4gdGhpcy50b2tlbkRlY2ltYWxzW190b2tlbi5zeW1ib2xdIHx8IDI7CiAgICB9CiAgICAvKioKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBfY29sbGF0ZXJhbAogICAgICogQHBhcmFtIHtudW1iZXJ9IF90b2tlblByaWNlCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0TWF4RGVidCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TWF4RGVidChfY29sbGF0ZXJhbCwgX3Rva2VuUHJpY2UpIHsKICAgICAgdmFyIG1heCA9IDA7CgogICAgICBpZiAoX2NvbGxhdGVyYWwgPiAwKSB7CiAgICAgICAgbWF4ID0gX2NvbGxhdGVyYWwgKiBfdG9rZW5QcmljZSAvIHRoaXMubWluQ29sbGF0ZXJhbFJhdGlvOwogICAgICB9CgogICAgICByZXR1cm4gbWF4OwogICAgfQogIH0sIHsKICAgIGtleTogImdldE1heERlYnRGVVNEIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNYXhEZWJ0RlVTRChfY29sbGF0ZXJhbEZVU0QpIHsKICAgICAgcmV0dXJuIF9jb2xsYXRlcmFsRlVTRCA+IDAgPyBfY29sbGF0ZXJhbEZVU0QgLyB0aGlzLm1pbkNvbGxhdGVyYWxSYXRpbyA6IDA7CiAgICB9CiAgICAvKioKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBfZGVidAogICAgICogQHBhcmFtIHtudW1iZXJ9IF9jb2xsYXRlcmFsCiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0TGlxdWlkYXRpb25QcmljZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TGlxdWlkYXRpb25QcmljZShfZGVidCwgX2NvbGxhdGVyYWwpIHsKICAgICAgdmFyIGxpcVByaWNlID0gMDsKCiAgICAgIGlmIChfZGVidCA+IDAgJiYgX2NvbGxhdGVyYWwgPiAwKSB7CiAgICAgICAgbGlxUHJpY2UgPSBfZGVidCAqIHRoaXMubGlxQ29sbGF0ZXJhbFJhdGlvIC8gX2NvbGxhdGVyYWw7CiAgICAgIH0KCiAgICAgIHJldHVybiBsaXFQcmljZTsKICAgIH0KICB9LCB7CiAgICBrZXk6ICJnZXRNaW50aW5nTGltaXQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1pbnRpbmdMaW1pdChfZGVidCwgX2NvbGxhdGVyYWwsIF90b2tlblByaWNlKSB7CiAgICAgIC8vIHJhdGlvIGJldHdlZW4gYWN0dWFsIGRlYnQgYW5kIGxpcXVpZGF0aW9uIGRlYnQKICAgICAgcmV0dXJuIF9jb2xsYXRlcmFsID4gMCA/IF9kZWJ0IC8gKHBhcnNlRmxvYXQoX2NvbGxhdGVyYWwpICogX3Rva2VuUHJpY2UgLyB0aGlzLmxpcUNvbGxhdGVyYWxSYXRpbykgKiAxMDAgOiAwOwogICAgfQogIH0sIHsKICAgIGtleTogImdldE1pbnRpbmdMaW1pdEZVU0QiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldE1pbnRpbmdMaW1pdEZVU0QoX2RlYnQsIF9jb2xsYXRlcmFsRlVTRCkgewogICAgICAvLyByYXRpbyBiZXR3ZWVuIGFjdHVhbCBkZWJ0IGFuZCBsaXF1aWRhdGlvbiBkZWJ0CiAgICAgIHJldHVybiBfY29sbGF0ZXJhbEZVU0QgPiAwID8gX2RlYnQgLyAoX2NvbGxhdGVyYWxGVVNEIC8gdGhpcy5saXFDb2xsYXRlcmFsUmF0aW8pICogMTAwIDogMDsKICAgIH0KICAgIC8qKgogICAgICogR2V0IGNvbG9yIHZhbHVlcyBmb3IgZi1jaXJjbGUtcHJvZ3Jlc3MgYW5kIGYtY29sb3JlZC1udW1iZXItcmFuZ2UgY29tcG9uZW50cwogICAgICoKICAgICAqIEByZXR1cm4ge3tjb2xvcjogc3RyaW5nLCB2YWx1ZTogbnVtYmVyfVtdfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldENvbG9ycyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29sb3JzKCkgewogICAgICByZXR1cm4gW3sKICAgICAgICB2YWx1ZTogdGhpcy5saXFDb2xsYXRlcmFsUmF0aW8gLyB0aGlzLm1pbkNvbGxhdGVyYWxSYXRpbyAqIDEwMCwKICAgICAgICBjb2xvcjogJyNmZmFmMTknCiAgICAgIH0sIHsKICAgICAgICB2YWx1ZTogdGhpcy53YXJuaW5nQ29sbGF0ZXJhbFJhdGlvIC8gdGhpcy5taW5Db2xsYXRlcmFsUmF0aW8gKiAxMDAsCiAgICAgICAgY29sb3I6ICcjZmYxNzE2JwogICAgICB9XTsKICAgIH0KICAgIC8qKgogICAgICogQHBhcmFtIHtudW1iZXJ9IF9kZWJ0CiAgICAgKiBAcGFyYW0ge251bWJlcn0gX3Rva2VuUHJpY2UKICAgICAqIEByZXR1cm4ge251bWJlcn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRNaW5Db2xsYXRlcmFsIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRNaW5Db2xsYXRlcmFsKF9kZWJ0LCBfdG9rZW5QcmljZSkgewogICAgICByZXR1cm4gX2RlYnQgKiB0aGlzLm1pbkNvbGxhdGVyYWxSYXRpbyAvIF90b2tlblByaWNlOwogICAgfQogICAgLyoqCiAgICAgKiBAcGFyYW0ge0RlZmlUb2tlbn0gX3Rva2VuCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0VG9rZW5TeW1ib2wiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldFRva2VuU3ltYm9sKF90b2tlbikgewogICAgICByZXR1cm4gX3Rva2VuICYmIF90b2tlbi5zeW1ib2wgPyBfdG9rZW4uc3ltYm9sICE9PSAnTkVYVCcgPyBsb3dlcmNhc2VGaXJzdENoYXIoX3Rva2VuLnN5bWJvbCkgOiBfdG9rZW4uc3ltYm9sIDogJyc7CiAgICB9CiAgICAvKioKICAgICAqIEBwYXJhbSB7RGVmaVRva2VufSBfdG9rZW4KICAgICAqIEByZXR1cm4ge251bWJlcn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRUb2tlblByaWNlIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRUb2tlblByaWNlKF90b2tlbikgewogICAgICByZXR1cm4gX3Rva2VuICYmICdwcmljZScgaW4gX3Rva2VuID8gdGhpcy5mcm9tVG9rZW5WYWx1ZShfdG9rZW4ucHJpY2UsIF90b2tlbiwgdHJ1ZSkgOiAwOwogICAgfQogICAgLyoqCiAgICAgKiBHZXQgb3ZlcmFsbCBkZWJ0IGluIEZVU0QuCiAgICAgKgogICAgICogQHBhcmFtIHtGTWludEFjY291bnR9IF9mTWludEFjY291bnQKICAgICAqIEByZXR1cm4ge251bWJlcn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRPdmVyYWxsRGVidCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3ZlcmFsbERlYnQoX2ZNaW50QWNjb3VudCkgewogICAgICByZXR1cm4gdGhpcy5mcm9tVG9rZW5WYWx1ZShfZk1pbnRBY2NvdW50LmRlYnRWYWx1ZSwgdGhpcy5mdXNkVG9rZW4pOwogICAgfQogICAgLyoqCiAgICAgKiBHZXQgb3ZlcmFsbCBjb2xsYXRlcmFsIGluIEZVU0QuCiAgICAgKgogICAgICogQHBhcmFtIHtGTWludEFjY291bnR9IF9mTWludEFjY291bnQKICAgICAqIEByZXR1cm4ge251bWJlcn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJnZXRPdmVyYWxsQ29sbGF0ZXJhbCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0T3ZlcmFsbENvbGxhdGVyYWwoX2ZNaW50QWNjb3VudCkgewogICAgICByZXR1cm4gdGhpcy5mcm9tVG9rZW5WYWx1ZShfZk1pbnRBY2NvdW50LmNvbGxhdGVyYWxWYWx1ZSwgdGhpcy5mdXNkVG9rZW4pOwogICAgfQogICAgLyoqCiAgICAgKiBHZXQgb3ZlcmFsbCBib3Jyb3cgbGltaXQgaW4gRlVTRC4KICAgICAqCiAgICAgKiBAcGFyYW0ge0ZNaW50QWNjb3VudH0gX2ZNaW50QWNjb3VudAogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEJvcnJvd0xpbWl0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRCb3Jyb3dMaW1pdChfZk1pbnRBY2NvdW50KSB7CiAgICAgIHZhciBvdmVyYWxsRGVidCA9IHRoaXMuZ2V0T3ZlcmFsbERlYnQoX2ZNaW50QWNjb3VudCk7CiAgICAgIHZhciBvdmVyYWxsQ29sbGF0ZXJhbCA9IHRoaXMuZ2V0T3ZlcmFsbENvbGxhdGVyYWwoX2ZNaW50QWNjb3VudCk7CiAgICAgIHJldHVybiB0aGlzLmdldE1heERlYnRGVVNEKG92ZXJhbGxDb2xsYXRlcmFsKSAtIG92ZXJhbGxEZWJ0OwogICAgfQogICAgLyoqCiAgICAgKiBHZXQgb3ZlcmFsbCBib3Jyb3cgbGltaXQgaW4gaGV4LgogICAgICoKICAgICAqIEBwYXJhbSB7Rk1pbnRBY2NvdW50fSBfZk1pbnRBY2NvdW50CiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0Qm9ycm93TGltaXRIZXgiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEJvcnJvd0xpbWl0SGV4KF9mTWludEFjY291bnQpIHsKICAgICAgdmFyIGRlYnRWYWx1ZSA9IHdlYjN1dGlscy50b0JOKF9mTWludEFjY291bnQuZGVidFZhbHVlKTsKICAgICAgdmFyIGNvbGxhdGVyYWxWYWx1ZSA9IHdlYjN1dGlscy50b0JOKF9mTWludEFjY291bnQuY29sbGF0ZXJhbFZhbHVlKTsKICAgICAgcmV0dXJuICcweCcgKyBjb2xsYXRlcmFsVmFsdWUuZGl2bih0aGlzLm1pbkNvbGxhdGVyYWxSYXRpbykuc3ViKGRlYnRWYWx1ZSkudG9TdHJpbmcoJ2hleCcpOwogICAgfQogICAgLyoqCiAgICAgKiBHZXQgb3ZlcmFsbCBkZWJ0IGxpbWl0IGluIEZVU0QuCiAgICAgKgogICAgICogQHBhcmFtIHtGTWludEFjY291bnR9IF9mTWludEFjY291bnQKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbX2N1cnJEZWJ0RlVTRF0gQ3VycmVudCBkZWJ0IGluIEZVU0QuCiAgICAgKiBAcGFyYW0ge251bWJlcn0gW19jdXJyQ29sbGF0ZXJhbEZVU0RdIEN1cnJlbnQgY29ycmF0ZXJhbCBpbiBGVVNELgogICAgICogQHJldHVybiB7bnVtYmVyfQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldERlYnRMaW1pdCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGVidExpbWl0KF9mTWludEFjY291bnQpIHsKICAgICAgdmFyIF9jdXJyRGVidEZVU0QgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7CgogICAgICB2YXIgX2N1cnJDb2xsYXRlcmFsRlVTRCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDsKCiAgICAgIHZhciBvdmVyYWxsRGVidCA9IHRoaXMuZ2V0T3ZlcmFsbERlYnQoX2ZNaW50QWNjb3VudCk7CiAgICAgIHZhciBvdmVyYWxsQ29sbGF0ZXJhbCA9IHRoaXMuZ2V0T3ZlcmFsbENvbGxhdGVyYWwoX2ZNaW50QWNjb3VudCk7CiAgICAgIHJldHVybiB0aGlzLmdldE1pbnRpbmdMaW1pdEZVU0QoX2N1cnJEZWJ0RlVTRCArIG92ZXJhbGxEZWJ0LCBfY3VyckNvbGxhdGVyYWxGVVNEICsgb3ZlcmFsbENvbGxhdGVyYWwpOwogICAgfQogICAgLyoqCiAgICAgKiBDb252ZXJ0IGdpdmVuIHZhbHVlIGZyb20gdG9rZW4gZGVjaW1hbHMgc3BhY2UuCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IF92YWx1ZSBIZXggdmFsdWUuCiAgICAgKiBAcGFyYW0ge0RlZmlUb2tlbn0gX3Rva2VuCiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtfaXNQcmljZV0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmcm9tVG9rZW5WYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZnJvbVRva2VuVmFsdWUoX3ZhbHVlLCBfdG9rZW4pIHsKICAgICAgdmFyIF9pc1ByaWNlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKCiAgICAgIHZhciB2YWx1ZSA9IDA7CgogICAgICBpZiAoX3ZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWlzTmFOKF92YWx1ZSkpIHsKICAgICAgICB2YWx1ZSA9IHBhcnNlRmxvYXQodGhpcy5zaGlmdERlY1BvaW50TGVmdChfdmFsdWUsIF9pc1ByaWNlID8gX3Rva2VuLnByaWNlRGVjaW1hbHMgOiBfdG9rZW4uZGVjaW1hbHMpKTsKICAgICAgfQoKICAgICAgcmV0dXJuIHZhbHVlOwogICAgfQogICAgLyoqCiAgICAgKiBDb252ZXJ0IGdpdmVuIHZhbHVlIHRvIHRva2VuIGRlY2ltYWxzIHNwYWNlLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfdmFsdWUKICAgICAqIEBwYXJhbSB7RGVmaVRva2VufSBfdG9rZW4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW19pc1ByaWNlXQogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCgogIH0sIHsKICAgIGtleTogInRvVG9rZW5WYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gdG9Ub2tlblZhbHVlKF92YWx1ZSwgX3Rva2VuKSB7CiAgICAgIHZhciBfaXNQcmljZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7CgogICAgICB2YXIgdmFsdWUgPSAwOwoKICAgICAgaWYgKF92YWx1ZSAhPT0gdW5kZWZpbmVkICYmICFpc05hTihfdmFsdWUpKSB7CiAgICAgICAgdmFsdWUgPSB0aGlzLnNoaWZ0RGVjUG9pbnRSaWdodChfdmFsdWUudG9TdHJpbmcoKSwgX2lzUHJpY2UgPyBfdG9rZW4ucHJpY2VEZWNpbWFscyA6IF90b2tlbi5kZWNpbWFscyk7CiAgICAgIH0KCiAgICAgIHJldHVybiB2YWx1ZTsKICAgIH0KICAgIC8qKgogICAgICogQHBhcmFtIHtzdHJpbmd9IF92YWx1ZQogICAgICogQHBhcmFtIHtudW1iZXJ9IF9kZWMgTnVtYmVyIG9mIGRlY2ltYWxzLgogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCgogIH0sIHsKICAgIGtleTogInNoaWZ0RGVjUG9pbnRMZWZ0IiwKICAgIHZhbHVlOiBmdW5jdGlvbiBzaGlmdERlY1BvaW50TGVmdChfdmFsdWUpIHsKICAgICAgdmFyIF9kZWMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDA7CgogICAgICAvLyBjb25zdCB2YWx1ZSA9IHdlYjN1dGlscy50b0JOKF92YWx1ZSkudG9TdHJpbmcoMTApOwogICAgICB2YXIgdmFsdWUgPSB3ZWIzdXRpbHMudG9CTih0aGlzLnJlbW92ZVNOKF92YWx1ZSwgX2RlYykpLnRvU3RyaW5nKDEwKTsKICAgICAgdmFyIGlkeCA9IHZhbHVlLmxlbmd0aCAtIF9kZWM7CgogICAgICBpZiAoaWR4IDwgMCkgewogICAgICAgIHJldHVybiAiMC4iLmNvbmNhdCh3ZWIzdXRpbHMucGFkTGVmdCh2YWx1ZSwgX2RlYywgJzAnKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmV0dXJuIHZhbHVlLnNsaWNlKDAsIGlkeCkgKyAnLicgKyB2YWx1ZS5zbGljZShpZHgpOwogICAgICB9CiAgICB9CiAgICAvKioKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfdmFsdWUKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBfZGVjIE51bWJlciBvZiBkZWNpbWFscy4KICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW19mbG9hdF0gRG9uJ3QgcmVtb3ZlIGRlY2ltYWxzLgogICAgICogQHJldHVybiB7c3RyaW5nfQogICAgICovCgogIH0sIHsKICAgIGtleTogInNoaWZ0RGVjUG9pbnRSaWdodCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2hpZnREZWNQb2ludFJpZ2h0KF92YWx1ZSkgewogICAgICB2YXIgX2RlYyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDsKCiAgICAgIHZhciBfZmxvYXQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlOwoKICAgICAgdmFyIHZhbHVlID0gdGhpcy5yZW1vdmVTTihfdmFsdWUudG9TdHJpbmcoKSwgX2RlYyk7CiAgICAgIHZhciBpZHggPSB2YWx1ZS5pbmRleE9mKCcuJyk7CiAgICAgIHZhciBsZWZ0OwogICAgICB2YXIgcmlnaHQ7CiAgICAgIHZhciByZXMgPSAnJzsKICAgICAgdmFyIGlzSGV4ID0gdmFsdWUuaW5kZXhPZignMHgnKSA9PT0gMDsKCiAgICAgIGlmIChpZHggPiAtMSkgewogICAgICAgIGxlZnQgPSB2YWx1ZS5zbGljZSgwLCBpZHgpOwogICAgICAgIHJpZ2h0ID0gdmFsdWUuc2xpY2UoaWR4ICsgMSk7CgogICAgICAgIGlmIChfZGVjIDwgcmlnaHQubGVuZ3RoKSB7CiAgICAgICAgICByZXMgPSBsZWZ0ICsgcmlnaHQuc2xpY2UoMCwgX2RlYykgKyAnLicgKyByaWdodC5zbGljZShfZGVjKTsKICAgICAgICB9IGVsc2UgaWYgKF9kZWMgPT09IHJpZ2h0Lmxlbmd0aCkgewogICAgICAgICAgcmVzID0gbGVmdCArIHJpZ2h0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXMgPSBsZWZ0ICsgd2ViM3V0aWxzLnBhZFJpZ2h0KHJpZ2h0LCBfZGVjLCAnMCcpOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXMgPSB2YWx1ZSArIHdlYjN1dGlscy5wYWRSaWdodCgnJywgX2RlYywgJzAnKTsKICAgICAgfSAvLyByZW1vdmUgbGVhZGluZyB6ZXJvcwoKCiAgICAgIHdoaWxlIChyZXMubGVuZ3RoID4gMCAmJiByZXMuY2hhckF0KDApID09PSAnMCcpIHsKICAgICAgICByZXMgPSByZXMuc2xpY2UoMSk7CiAgICAgIH0KCiAgICAgIGlmICghX2Zsb2F0KSB7CiAgICAgICAgaWR4ID0gcmVzLmluZGV4T2YoJy4nKTsKCiAgICAgICAgaWYgKGlkeCA+IC0xKSB7CiAgICAgICAgICByZXMgPSByZXMuc2xpY2UoMCwgaWR4KTsKICAgICAgICB9CgogICAgICAgIGlmICghcmVzKSB7CiAgICAgICAgICByZXMgPSAnMCc7CiAgICAgICAgfQogICAgICB9CgogICAgICBpZiAoaXNIZXggJiYgcmVzLmNoYXJBdCgwKSA9PT0gJ3gnKSB7CiAgICAgICAgcmVzID0gJzAnICsgcmVzOwogICAgICB9CgogICAgICByZXR1cm4gcmVzOwogICAgfQogICAgLyoqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gX3ZhbHVlCiAgICAgKiBAcGFyYW0ge251bWJlcn0gX2RlY2ltYWxzCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAic2hpZnREZWNQb2ludCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gc2hpZnREZWNQb2ludChfdmFsdWUsIF9kZWNpbWFscykgewogICAgICB2YXIgdmFsdWUgPSBfdmFsdWUudG9TdHJpbmcoKTsKCiAgICAgIGlmIChfZGVjaW1hbHMgPT09IDApIHsKICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgIH0gZWxzZSBpZiAoX2RlY2ltYWxzIDwgMCkgewogICAgICAgIHJldHVybiB0aGlzLnNoaWZ0RGVjUG9pbnRMZWZ0KHZhbHVlLCAtX2RlY2ltYWxzKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5zaGlmdERlY1BvaW50UmlnaHQodmFsdWUsIF9kZWNpbWFscyk7CiAgICAgIH0KICAgIH0KICAgIC8qKgogICAgICogUmVtb3ZlIHNjaWVudGlmaWMgbm90YXRpb24uCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd8bnVtYmVyfSBfdmFsdWUKICAgICAqIEBwYXJhbSB7bnVtYmVyfSBfZGVjCiAgICAgKiBAcmV0dXJuIHtzdHJpbmd8Kn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJyZW1vdmVTTiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlU04oX3ZhbHVlLCBfZGVjKSB7CiAgICAgIHZhciB2YWx1ZSA9IHR5cGVvZiBfdmFsdWUgIT09ICdzdHJpbmcnID8gX3ZhbHVlLnRvU3RyaW5nKCkgOiBfdmFsdWU7CgogICAgICBpZiAodmFsdWUuaW5kZXhPZignMHgnKSA9PT0gLTEgJiYgKHZhbHVlLmluZGV4T2YoJ2UnKSA+IC0xIHx8IHZhbHVlLmluZGV4T2YoJ0UnKSA+IC0xKSkgewogICAgICAgIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKS50b0ZpeGVkKF9kZWMpOwogICAgICB9CgogICAgICByZXR1cm4gX3ZhbHVlOwogICAgfQogICAgLyoqCiAgICAgKiBWYWx1ZSBhbmQgcmVzdWx0IHZhbHVlIGFyZSBib3RoIGluICJXRUkiLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gX3ZhbHVlIFZhbHVlIGluIGBfdG9rZW5gIGRlY2ltYWwgc3BhY2UuCiAgICAgKiBAcGFyYW0ge0RlZmlUb2tlbn0gX3Rva2VuCiAgICAgKiBAcGFyYW0ge0RlZmlUb2tlbn0gX3RvVG9rZW4KICAgICAqIEByZXR1cm4ge3N0cmluZ30KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjb252ZXJ0VG9rZW5WYWx1ZVdFSSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydFRva2VuVmFsdWVXRUkoX3ZhbHVlLCBfdG9rZW4sIF90b1Rva2VuKSB7CiAgICAgIGlmIChpc09iamVjdEVtcHR5KF90b2tlbikgfHwgaXNPYmplY3RFbXB0eShfdG9Ub2tlbikpIHsKICAgICAgICByZXR1cm4gJyc7CiAgICAgIH0KCiAgICAgIHZhciB2YWx1ZSA9IHdlYjN1dGlscy50b0JOKF92YWx1ZSk7CiAgICAgIHZhciB0b2tlblByaWNlID0gd2ViM3V0aWxzLnRvQk4oX3Rva2VuLnByaWNlKTsKICAgICAgdmFyIHRvVG9rZW5QcmljZSA9IHdlYjN1dGlscy50b0JOKF90b1Rva2VuLnByaWNlKTsKICAgICAgdmFyIHJlc3VsdCA9IHZhbHVlLm11bCh0b2tlblByaWNlKS5kaXYodG9Ub2tlblByaWNlKS50b1N0cmluZygxMCk7CiAgICAgIHZhciByZXN1bHREZWNpbWFscyA9IF90b1Rva2VuLmRlY2ltYWxzIC0gKF90b2tlbi5kZWNpbWFscyArIF90b2tlbi5wcmljZURlY2ltYWxzIC0gX3RvVG9rZW4ucHJpY2VEZWNpbWFscyk7CiAgICAgIHJldHVybiB0aGlzLnNoaWZ0RGVjUG9pbnQocmVzdWx0LCByZXN1bHREZWNpbWFscyk7CiAgICB9CiAgICAvKioKICAgICAqIFZhbHVlIGFuZCByZXN1bHQgdmFsdWUgYXJlIGNvbnZlcnRlZCBmcm9tICJXRUkiLgogICAgICoKICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gX3ZhbHVlIFZhbHVlIGluIGBfdG9rZW5gIGRlY2ltYWwgc3BhY2UuCiAgICAgKiBAcGFyYW0ge0RlZmlUb2tlbn0gX3Rva2VuCiAgICAgKiBAcGFyYW0ge0RlZmlUb2tlbn0gX3RvVG9rZW4KICAgICAqIEByZXR1cm4ge3N0cmluZ30KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjb252ZXJ0VG9rZW5WYWx1ZSIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29udmVydFRva2VuVmFsdWUoX3ZhbHVlLCBfdG9rZW4sIF90b1Rva2VuKSB7CiAgICAgIHJldHVybiB0aGlzLmZyb21Ub2tlblZhbHVlKHRoaXMuY29udmVydFRva2VuVmFsdWVXRUkodGhpcy50b1Rva2VuVmFsdWUoX3ZhbHVlLCBfdG9rZW4pLCBfdG9rZW4sIF90b1Rva2VuKSwgX3RvVG9rZW4pOwogICAgfQogICAgLyoqCiAgICAgKiBDb21wYXJlIGJpZyBudW1iZXJzLCBoZXguCiAgICAgKgogICAgICogQHBhcmFtIHtzdHJpbmd9IF9hCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gX2IKICAgICAqIEByZXR1cm4gey0xIHwgMCB8IDF9IC0xIChfYSA8IF9iKSwgMCAoX2EgPT0gX2IpLCBvciAxIChfYSA+IF9iKQogICAgICovCgogIH0sIHsKICAgIGtleTogImNvbXBhcmVCTiIsCiAgICB2YWx1ZTogZnVuY3Rpb24gY29tcGFyZUJOKF9hLCBfYikgewogICAgICB2YXIgaGV4MSA9IHdlYjN1dGlscy50b0JOKF9hKTsKICAgICAgdmFyIGhleDIgPSB3ZWIzdXRpbHMudG9CTihfYik7CiAgICAgIHJldHVybiBoZXgxLmNtcChoZXgyKTsKICAgIH0KICAgIC8qKgogICAgICogR2V0IGRlZmkgYWNjb3VudCBkZWJ0IGJ5IHRva2VuLgogICAgICoKICAgICAqIEBwYXJhbSB7Rk1pbnRBY2NvdW50fSBfYWNjb3VudAogICAgICogQHBhcmFtIHtEZWZpVG9rZW59IF90b2tlbgogICAgICogQHJldHVybiB7Rk1pbnRUb2tlbkJhbGFuY2V8e319CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZ2V0Rk1pbnRBY2NvdW50RGVidCIsCiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Rk1pbnRBY2NvdW50RGVidChfYWNjb3VudCwgX3Rva2VuKSB7CiAgICAgIHZhciBkZWJ0ID0ge307CiAgICAgIHZhciBhY291bnREZWJ0OwoKICAgICAgaWYgKF90b2tlbiAmJiBfYWNjb3VudCAmJiBfYWNjb3VudC5kZWJ0ICYmIF9hY2NvdW50LmRlYnQubGVuZ3RoID4gMCkgewogICAgICAgIGFjb3VudERlYnQgPSBfYWNjb3VudC5kZWJ0LmZpbmQoZnVuY3Rpb24gKF9pdGVtKSB7CiAgICAgICAgICByZXR1cm4gX2l0ZW0udG9rZW5BZGRyZXNzID09PSBfdG9rZW4uYWRkcmVzczsKICAgICAgICB9KTsKCiAgICAgICAgaWYgKGFjb3VudERlYnQpIHsKICAgICAgICAgIGRlYnQgPSBhY291bnREZWJ0OwogICAgICAgIH0KICAgICAgfQoKICAgICAgcmV0dXJuIGRlYnQ7CiAgICB9CiAgICAvKioKICAgICAqIEdldCBkZWZpIGFjY291bnQgY29sbGF0ZXJhbCBieSB0b2tlbi4KICAgICAqCiAgICAgKiBAcGFyYW0ge0ZNaW50QWNjb3VudH0gX2FjY291bnQKICAgICAqIEBwYXJhbSB7RGVmaVRva2VufSBfdG9rZW4KICAgICAqIEByZXR1cm4ge0ZNaW50VG9rZW5CYWxhbmNlfHt9fQogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEZNaW50QWNjb3VudENvbGxhdGVyYWwiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGdldEZNaW50QWNjb3VudENvbGxhdGVyYWwoX2FjY291bnQsIF90b2tlbikgewogICAgICB2YXIgY29sbGF0ZXJhbCA9IHt9OwogICAgICB2YXIgYWNvdW50Q29sbGF0ZXJhbDsKCiAgICAgIGlmIChfdG9rZW4gJiYgX2FjY291bnQgJiYgX2FjY291bnQuY29sbGF0ZXJhbCAmJiBfYWNjb3VudC5jb2xsYXRlcmFsLmxlbmd0aCA+IDApIHsKICAgICAgICBhY291bnRDb2xsYXRlcmFsID0gX2FjY291bnQuY29sbGF0ZXJhbC5maW5kKGZ1bmN0aW9uIChfaXRlbSkgewogICAgICAgICAgcmV0dXJuIF9pdGVtLnRva2VuQWRkcmVzcyA9PT0gX3Rva2VuLmFkZHJlc3M7CiAgICAgICAgfSk7CgogICAgICAgIGlmIChhY291bnRDb2xsYXRlcmFsKSB7CiAgICAgICAgICBjb2xsYXRlcmFsID0gYWNvdW50Q29sbGF0ZXJhbDsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHJldHVybiBjb2xsYXRlcmFsOwogICAgfQogICAgLyoqCiAgICAgKiBAcGFyYW0ge0RlZmlUb2tlbn0gX3Rva2VuCiAgICAgKiBAcmV0dXJuIHtib29sZWFufQogICAgICovCgogIH0sIHsKICAgIGtleTogImNhblRva2VuQmVNaW50ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhblRva2VuQmVNaW50ZWQoX3Rva2VuKSB7CiAgICAgIC8vIHJldHVybiBfdG9rZW4gJiYgX3Rva2VuLmlzQWN0aXZlICYmIF90b2tlbi5jYW5NaW50ICYmIF90b2tlbi5zeW1ib2wgIT09ICdGVVNEJzsKICAgICAgcmV0dXJuIF90b2tlbiAmJiBfdG9rZW4uaXNBY3RpdmUgJiYgX3Rva2VuLmNhbk1pbnQ7CiAgICB9CiAgICAvKioKICAgICAqIEBwYXJhbSB7RGVmaVRva2VufSBfdG9rZW4KICAgICAqIEByZXR1cm4ge2Jvb2xlYW59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiY2FuVG9rZW5CZUJvcnJvd2VkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5Ub2tlbkJlQm9ycm93ZWQoX3Rva2VuKSB7CiAgICAgIC8vIHJldHVybiBfdG9rZW4gJiYgX3Rva2VuLmlzQWN0aXZlICYmIF90b2tlbi5jYW5Cb3Jyb3cgJiYgX3Rva2VuLnN5bWJvbCAhPT0gJ0ZVU0QnOwogICAgICByZXR1cm4gX3Rva2VuICYmIF90b2tlbi5pc0FjdGl2ZSAmJiBfdG9rZW4uY2FuQm9ycm93OwogICAgfQogICAgLyoqCiAgICAgKiBAcGFyYW0ge0RlZmlUb2tlbn0gX3Rva2VuCiAgICAgKiBAcmV0dXJuIHtib29sZWFufQogICAgICovCgogIH0sIHsKICAgIGtleTogImNhblRva2VuQmVEZXBvc2l0ZWQiLAogICAgdmFsdWU6IGZ1bmN0aW9uIGNhblRva2VuQmVEZXBvc2l0ZWQoX3Rva2VuKSB7CiAgICAgIHJldHVybiBfdG9rZW4gJiYgX3Rva2VuLmlzQWN0aXZlICYmIF90b2tlbi5jYW5EZXBvc2l0ICYmIF90b2tlbi5zeW1ib2wgIT09ICdORVhUJzsKICAgIH0KICAgIC8qKgogICAgICogQHBhcmFtIHtEZWZpVG9rZW59IF90b2tlbgogICAgICogQHJldHVybiB7Ym9vbGVhbn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJjYW5Ub2tlbkJlVHJhZGVkIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBjYW5Ub2tlbkJlVHJhZGVkKF90b2tlbikgewogICAgICAvLyByZXR1cm4gX3Rva2VuICYmIF90b2tlbi5pc0FjdGl2ZSAmJiBfdG9rZW4uY2FuVHJhZGU7CiAgICAgIHJldHVybiBfdG9rZW4gJiYgX3Rva2VuLmlzQWN0aXZlICYmIChfdG9rZW4uY2FuVHJhZGUgfHwgX3Rva2VuLnN5bWJvbCA9PT0gJ05FWFQnKTsgLy8gcmV0dXJuIF90b2tlbiAmJiBfdG9rZW4uaXNBY3RpdmUgJiYgKF90b2tlbi5jYW5UcmFkZSB8fCBfdG9rZW4uc3ltYm9sID09PSAnRlVTRCcpOwogICAgfQogICAgLyoqCiAgICAgKiBAcGFyYW0ge0RlZmlUb2tlbn0gX3Rva2VuCiAgICAgKiBAcmV0dXJuIHtib29sZWFufQogICAgICovCgogIH0sIHsKICAgIGtleTogImZpbHRlclRva2Vuc0J5U3ltYm9sIiwKICAgIHZhbHVlOiBmdW5jdGlvbiBmaWx0ZXJUb2tlbnNCeVN5bWJvbChfdG9rZW4pIHsKICAgICAgcmV0dXJuIF90b2tlbiAmJiBmaWx0ZXJUb2tlbnMuaW5kZXhPZihfdG9rZW4uc3ltYm9sKSA+IC0xOwogICAgfQogICAgLyoqCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPERlZmlTZXR0aW5ncz59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZmV0Y2hTZXR0aW5ncyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ZldGNoU2V0dGluZ3MgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBkYXRhOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMiQoX2NvbnRleHQyKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Mi5wcmV2ID0gX2NvbnRleHQyLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcG9sbG9DbGllbnQucXVlcnkoewogICAgICAgICAgICAgICAgICBxdWVyeTogZ3FsKF90ZW1wbGF0ZU9iamVjdCB8fCAoX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbIlxuICAgICAgICAgICAgICAgIHF1ZXJ5IERlZmlTZXR0aW5ncyB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmlDb25maWd1cmF0aW9uIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pbnRGZWU0XG4gICAgICAgICAgICAgICAgICAgICAgICByZXdhcmRDb2xsYXRlcmFsUmF0aW80XG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5Db2xsYXRlcmFsUmF0aW80XG4gICAgICAgICAgICAgICAgICAgICAgICBmTWludENvbnRyYWN0XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNpbWFsc1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgIl0pKSksCiAgICAgICAgICAgICAgICAgIGZldGNoUG9saWN5OiAnbmV0d29yay1vbmx5JwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBkYXRhLmRhdGEuZGVmaUNvbmZpZ3VyYXRpb24gfHwge30pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTIsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBmZXRjaFNldHRpbmdzKCkgewogICAgICAgIHJldHVybiBfZmV0Y2hTZXR0aW5ncy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZmV0Y2hTZXR0aW5nczsKICAgIH0oKQogICAgLyoqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gX293bmVyQWRkcmVzcwogICAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IFtfc3ltYm9sXQogICAgICogQHJldHVybiB7UHJvbWlzZTxEZWZpVG9rZW5bXT59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZmV0Y2hUb2tlbnMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9mZXRjaFRva2VucyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTMoX293bmVyQWRkcmVzcywgX3N5bWJvbCkgewogICAgICAgIHZhciBxdWVyeSwgZGF0YSwgZGVmaVRva2VucywgdG9rZW5zOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlMyQoX2NvbnRleHQzKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0My5wcmV2ID0gX2NvbnRleHQzLm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBxdWVyeSA9IHsKICAgICAgICAgICAgICAgICAgcXVlcnk6IF9vd25lckFkZHJlc3MgPyBncWwoX3RlbXBsYXRlT2JqZWN0MiB8fCAoX3RlbXBsYXRlT2JqZWN0MiA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWyJcbiAgICAgICAgICAgICAgICAgICAgICBxdWVyeSBEZWZpVG9rZW5zKCRvd25lcjogQWRkcmVzcyEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmaVRva2VucyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ29VcmxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlY2ltYWxzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2VEZWNpbWFsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxTdXBwbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5XcmFwRlRNXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5EZXBvc2l0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5NaW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5Cb3Jyb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhblRyYWRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdmFpbGFibGVCYWxhbmNlKG93bmVyOiAkb3duZXIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxvd2FuY2Uob3duZXI6ICRvd25lcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICJdKSkpIDogZ3FsKF90ZW1wbGF0ZU9iamVjdDMgfHwgKF90ZW1wbGF0ZU9iamVjdDMgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gICAgICAgICAgICAgICAgICAgICAgcXVlcnkgRGVmaVRva2VucyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmlUb2tlbnMge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dvVXJsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNpbWFsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlRGVjaW1hbHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsU3VwcGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuV3JhcEZUTVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuRGVwb3NpdFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuTWludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FuQm9ycm93XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYW5UcmFkZVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIl0pKSksCiAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogewogICAgICAgICAgICAgICAgICAgIG93bmVyOiBfb3duZXJBZGRyZXNzCiAgICAgICAgICAgICAgICAgIH0gLy8gZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknLAoKICAgICAgICAgICAgICAgIH07IC8vIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmFwb2xsb0NsaWVudC5xdWVyeShxdWVyeSk7CgogICAgICAgICAgICAgICAgX2NvbnRleHQzLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGZGZXRjaC5mZXRjaEdRTFF1ZXJ5KHF1ZXJ5LCAnZGVmaVRva2VucycpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBkYXRhID0gX2NvbnRleHQzLnNlbnQ7CiAgICAgICAgICAgICAgICBkZWZpVG9rZW5zID0gZGF0YS5kYXRhLmRlZmlUb2tlbnMgfHwgW107CgogICAgICAgICAgICAgICAgaWYgKGZpbHRlclRva2Vucy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgIGRlZmlUb2tlbnMgPSBkZWZpVG9rZW5zLmZpbHRlcih0aGlzLmZpbHRlclRva2Vuc0J5U3ltYm9sKTsKICAgICAgICAgICAgICAgIH0gLy8gY29uc29sZS5sb2coZGVmaVRva2Vucyk7CgoKICAgICAgICAgICAgICAgIHRva2VucyA9IFtdOwoKICAgICAgICAgICAgICAgIHRoaXMuX3NldFRva2VucyhkZWZpVG9rZW5zKTsKCiAgICAgICAgICAgICAgICBpZiAoX3N5bWJvbCkgewogICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIF9zeW1ib2wgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgdG9rZW5zID0gZGVmaVRva2Vucy5maW5kKGZ1bmN0aW9uIChfaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9pdGVtLnN5bWJvbCA9PT0gX3N5bWJvbDsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfc3ltYm9sLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgIHRva2VucyA9IGRlZmlUb2tlbnMuZmlsdGVyKGZ1bmN0aW9uIChfaXRlbSkgewogICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9zeW1ib2wuaW5kZXhPZihfaXRlbS5zeW1ib2wpID4gLTE7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgIHRva2VucyA9IGRlZmlUb2tlbnM7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0My5hYnJ1cHQoInJldHVybiIsIHRva2Vucyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDMuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTMsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBmZXRjaFRva2VucyhfeCwgX3gyKSB7CiAgICAgICAgcmV0dXJuIF9mZXRjaFRva2Vucy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZmV0Y2hUb2tlbnM7CiAgICB9KCkKICAgIC8qKgogICAgICogQHBhcmFtIHtzdHJpbmd9IFtfb3duZXJBZGRyZXNzXQogICAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IFtfc3ltYm9sXQogICAgICogQHJldHVybiB7UHJvbWlzZTxEZWZpVG9rZW5bXT59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZmV0Y2hFUkMyMFRva2VucyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ZldGNoRVJDMjBUb2tlbnMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU0KF9vd25lckFkZHJlc3MsIF9zeW1ib2wpIHsKICAgICAgICB2YXIgcXVlcnksIGRhdGEsIGVyYzIwVG9rZW5MaXN0LCB0b2tlbnM7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU0JChfY29udGV4dDQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ0LnByZXYgPSBfY29udGV4dDQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHF1ZXJ5ID0gewogICAgICAgICAgICAgICAgICBxdWVyeTogX293bmVyQWRkcmVzcyA/IGdxbChfdGVtcGxhdGVPYmplY3Q0IHx8IChfdGVtcGxhdGVPYmplY3Q0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbIlxuICAgICAgICAgICAgICAgICAgICAgIHF1ZXJ5IEVSQzIwVG9rZW5MaXN0KCRvd25lcjogQWRkcmVzcyEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZXJjMjBUb2tlbkxpc3Qge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWNpbWFsc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWxTdXBwbHlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ29VUkxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VPZihvd25lcjogJG93bmVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgIl0pKSkgOiBncWwoX3RlbXBsYXRlT2JqZWN0NSB8fCAoX3RlbXBsYXRlT2JqZWN0NSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWyJcbiAgICAgICAgICAgICAgICAgICAgICBxdWVyeSBFUkMyMFRva2VuTGlzdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGVyYzIwVG9rZW5MaXN0IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsU3VwcGx5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dvVVJMXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAiXSkpKSwKICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgICAgICAgICAgICAgb3duZXI6IF9vd25lckFkZHJlc3MKICAgICAgICAgICAgICAgICAgfSAvLyBmZXRjaFBvbGljeTogJ25ldHdvcmstb25seScsCgogICAgICAgICAgICAgICAgfTsgLy8gY29uc3QgZGF0YSA9IGF3YWl0IHRoaXMuYXBvbGxvQ2xpZW50LnF1ZXJ5KHF1ZXJ5KTsKCiAgICAgICAgICAgICAgICBfY29udGV4dDQubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gZkZldGNoLmZldGNoR1FMUXVlcnkocXVlcnksICdlcmMyMFRva2VuTGlzdCcpOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBkYXRhID0gX2NvbnRleHQ0LnNlbnQ7CiAgICAgICAgICAgICAgICBlcmMyMFRva2VuTGlzdCA9IGRhdGEuZGF0YS5lcmMyMFRva2VuTGlzdCB8fCBbXTsKCiAgICAgICAgICAgICAgICBpZiAoZmlsdGVyVG9rZW5zLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgZXJjMjBUb2tlbkxpc3QgPSBlcmMyMFRva2VuTGlzdC5maWx0ZXIodGhpcy5maWx0ZXJUb2tlbnNCeVN5bWJvbCk7CiAgICAgICAgICAgICAgICB9IC8vIGNvbnNvbGUubG9nKCdlcmMyMCcsIGVyYzIwVG9rZW5MaXN0KTsKCgogICAgICAgICAgICAgICAgdG9rZW5zID0gW107CgogICAgICAgICAgICAgICAgdGhpcy5fc2V0VG9rZW5zKGVyYzIwVG9rZW5MaXN0KTsKCiAgICAgICAgICAgICAgICBpZiAoX3N5bWJvbCkgewogICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIF9zeW1ib2wgPT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgdG9rZW5zID0gZXJjMjBUb2tlbkxpc3QuZmluZChmdW5jdGlvbiAoX2l0ZW0pIHsKICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfaXRlbS5zeW1ib2wgPT09IF9zeW1ib2w7CiAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX3N5bWJvbC5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICB0b2tlbnMgPSBlcmMyMFRva2VuTGlzdC5maWx0ZXIoZnVuY3Rpb24gKF9pdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3N5bWJvbC5pbmRleE9mKF9pdGVtLnN5bWJvbCkgPiAtMTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdG9rZW5zID0gZXJjMjBUb2tlbkxpc3Q7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NC5hYnJ1cHQoInJldHVybiIsIHRva2Vucyk7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTQsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBmZXRjaEVSQzIwVG9rZW5zKF94MywgX3g0KSB7CiAgICAgICAgcmV0dXJuIF9mZXRjaEVSQzIwVG9rZW5zLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmZXRjaEVSQzIwVG9rZW5zOwogICAgfSgpCiAgICAvKioKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfb3duZXJBZGRyZXNzCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPERlZmlUb2tlbltdPn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmZXRjaEVSQzIwVG9rZW5zQXZhaWxhYmxlQmFsYW5jZXMiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9mZXRjaEVSQzIwVG9rZW5zQXZhaWxhYmxlQmFsYW5jZXMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU1KF9vd25lckFkZHJlc3MpIHsKICAgICAgICB2YXIgcXVlcnksIGRhdGE7CiAgICAgICAgcmV0dXJuIF9yZWdlbmVyYXRvclJ1bnRpbWUoKS53cmFwKGZ1bmN0aW9uIF9jYWxsZWU1JChfY29udGV4dDUpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQ1LnByZXYgPSBfY29udGV4dDUubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHF1ZXJ5ID0gewogICAgICAgICAgICAgICAgICBxdWVyeTogZ3FsKF90ZW1wbGF0ZU9iamVjdDYgfHwgKF90ZW1wbGF0ZU9iamVjdDYgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gICAgICAgICAgICAgICAgcXVlcnkgRVJDMjBUb2tlbkxpc3QoJG93bmVyOiBBZGRyZXNzISkge1xuICAgICAgICAgICAgICAgICAgICBlcmMyMFRva2VuTGlzdCB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRyZXNzXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlT2Yob3duZXI6ICRvd25lcilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICJdKSkpLAogICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHsKICAgICAgICAgICAgICAgICAgICBvd25lcjogX293bmVyQWRkcmVzcwogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgX2NvbnRleHQ1Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIGZGZXRjaC5mZXRjaEdRTFF1ZXJ5KHF1ZXJ5LCAnZXJjMjBUb2tlbkxpc3QnKTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0NS5zZW50OwogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5hYnJ1cHQoInJldHVybiIsIGRhdGEuZGF0YS5lcmMyMFRva2VuTGlzdCB8fCBbXSk7CgogICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0NS5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlNSk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGZldGNoRVJDMjBUb2tlbnNBdmFpbGFibGVCYWxhbmNlcyhfeDUpIHsKICAgICAgICByZXR1cm4gX2ZldGNoRVJDMjBUb2tlbnNBdmFpbGFibGVCYWxhbmNlcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB9CgogICAgICByZXR1cm4gZmV0Y2hFUkMyMFRva2Vuc0F2YWlsYWJsZUJhbGFuY2VzOwogICAgfSgpCiAgICAvKioKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfb3duZXJBZGRyZXNzCiAgICAgKiBAcGFyYW0ge0VSQzIwVG9rZW5bXX0gX3Rva2VucwogICAgICovCgogIH0sIHsKICAgIGtleTogImdldEVSQzIwVG9rZW5zV2l0aEF2YWlsYWJsZUJhbGFuY2VzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZ2V0RVJDMjBUb2tlbnNXaXRoQXZhaWxhYmxlQmFsYW5jZXMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU2KF9vd25lckFkZHJlc3MsIF90b2tlbnMpIHsKICAgICAgICB2YXIgdG9rZW5CYWxhbmNlcywgdG9rZW5zOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlNiQoX2NvbnRleHQ2KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0Ni5wcmV2ID0gX2NvbnRleHQ2Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDYubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mZXRjaEVSQzIwVG9rZW5zQXZhaWxhYmxlQmFsYW5jZXMoX293bmVyQWRkcmVzcyk7CgogICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgIHRva2VuQmFsYW5jZXMgPSBfY29udGV4dDYuc2VudDsKICAgICAgICAgICAgICAgIHRva2VucyA9IGNsb25lT2JqZWN0KF90b2tlbnMpOwoKICAgICAgICAgICAgICAgIGlmICh0b2tlbkJhbGFuY2VzKSB7CiAgICAgICAgICAgICAgICAgIHRva2VuQmFsYW5jZXMuZm9yRWFjaChmdW5jdGlvbiAoX3Rva2VuKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zLmZpbmQoZnVuY3Rpb24gKF90KSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3QuYWRkcmVzcyA9PT0gX3Rva2VuLmFkZHJlc3M7CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgIGlmICh0b2tlbikgewogICAgICAgICAgICAgICAgICAgICAgdG9rZW4uYmFsYW5jZU9mID0gX3Rva2VuLmJhbGFuY2VPZjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuYWJydXB0KCJyZXR1cm4iLCB0b2tlbnMpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDYuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTYsIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBnZXRFUkMyMFRva2Vuc1dpdGhBdmFpbGFibGVCYWxhbmNlcyhfeDYsIF94NykgewogICAgICAgIHJldHVybiBfZ2V0RVJDMjBUb2tlbnNXaXRoQXZhaWxhYmxlQmFsYW5jZXMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGdldEVSQzIwVG9rZW5zV2l0aEF2YWlsYWJsZUJhbGFuY2VzOwogICAgfSgpCiAgICAvKioKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbX293bmVyQWRkcmVzc10KICAgICAqIEByZXR1cm4ge1Byb21pc2U8RVJDMjBUb2tlbltdPn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmZXRjaEVSQzIwQXNzZXRzIiwKICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7CiAgICAgIHZhciBfZmV0Y2hFUkMyMEFzc2V0cyA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTcoX293bmVyQWRkcmVzcykgewogICAgICAgIHZhciBxdWVyeSwgZGF0YTsKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTckKF9jb250ZXh0NykgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDcucHJldiA9IF9jb250ZXh0Ny5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgcXVlcnkgPSB7CiAgICAgICAgICAgICAgICAgIHF1ZXJ5OiBncWwoX3RlbXBsYXRlT2JqZWN0NyB8fCAoX3RlbXBsYXRlT2JqZWN0NyA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwoWyJcbiAgICAgICAgICAgICAgICBxdWVyeSBFcmMyMEFzc2V0cygkb3duZXI6IEFkZHJlc3MhKSB7XG4gICAgICAgICAgICAgICAgICAgIGVyYzIwQXNzZXRzKG93bmVyOiAkb3duZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVjaW1hbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsU3VwcGx5XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dvVVJMXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlT2Yob3duZXI6ICRvd25lcilcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICJdKSkpLAogICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHsKICAgICAgICAgICAgICAgICAgICBvd25lcjogX293bmVyQWRkcmVzcwogICAgICAgICAgICAgICAgICB9IC8vIGZldGNoUG9saWN5OiAnbmV0d29yay1vbmx5JywKCiAgICAgICAgICAgICAgICB9OyAvLyBjb25zdCBkYXRhID0gYXdhaXQgdGhpcy5hcG9sbG9DbGllbnQucXVlcnkocXVlcnkpOwoKICAgICAgICAgICAgICAgIF9jb250ZXh0Ny5uZXh0ID0gMzsKICAgICAgICAgICAgICAgIHJldHVybiBmRmV0Y2guZmV0Y2hHUUxRdWVyeShxdWVyeSwgJ2VyYzIwQXNzZXRzJyk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dDcuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDcuYWJydXB0KCJyZXR1cm4iLCBkYXRhICYmIGRhdGEuZGF0YSA/IGRhdGEuZGF0YS5lcmMyMEFzc2V0cyA6IFtdIHx8IFtdKTsKCiAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ3LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWU3KTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZmV0Y2hFUkMyMEFzc2V0cyhfeDgpIHsKICAgICAgICByZXR1cm4gX2ZldGNoRVJDMjBBc3NldHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgfQoKICAgICAgcmV0dXJuIGZldGNoRVJDMjBBc3NldHM7CiAgICB9KCkKICAgIC8qKgogICAgICogQHBhcmFtIHtzdHJpbmd8YXJyYXl9IFtfc3ltYm9sXQogICAgICogQHJldHVybiB7UHJvbWlzZTxudW1iZXJbXT59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZmV0Y2hUb2tlblByaWNlcyIsCiAgICB2YWx1ZTogZnVuY3Rpb24gKCkgewogICAgICB2YXIgX2ZldGNoVG9rZW5QcmljZXMgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWU4KF9zeW1ib2wpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgICB2YXIgZGF0YSwgZGVmaVRva2VucywgdG9rZW5zOwogICAgICAgIHJldHVybiBfcmVnZW5lcmF0b3JSdW50aW1lKCkud3JhcChmdW5jdGlvbiBfY2FsbGVlOCQoX2NvbnRleHQ4KSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0OC5wcmV2ID0gX2NvbnRleHQ4Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfY29udGV4dDgubmV4dCA9IDI7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcG9sbG9DbGllbnQucXVlcnkoewogICAgICAgICAgICAgICAgICBxdWVyeTogZ3FsKF90ZW1wbGF0ZU9iamVjdDggfHwgKF90ZW1wbGF0ZU9iamVjdDggPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gICAgICAgICAgICAgICAgcXVlcnkgRGVmaVRva2VucyB7XG4gICAgICAgICAgICAgICAgICAgIGRlZmlUb2tlbnMge1xuICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNpbWFsc1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJpY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlRGVjaW1hbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzQWN0aXZlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAiXSkpKSwKICAgICAgICAgICAgICAgICAgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0OC5zZW50OwogICAgICAgICAgICAgICAgZGVmaVRva2VucyA9IGRhdGEuZGF0YS5kZWZpVG9rZW5zIHx8IFtdOwogICAgICAgICAgICAgICAgdG9rZW5zID0gW107CgogICAgICAgICAgICAgICAgdGhpcy5fc2V0VG9rZW5zKGRlZmlUb2tlbnMpOwoKICAgICAgICAgICAgICAgIGlmIChfc3ltYm9sKSB7CiAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgX3N5bWJvbCA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICB0b2tlbnMgPSBkZWZpVG9rZW5zLmZpbmQoZnVuY3Rpb24gKF9pdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2l0ZW0uc3ltYm9sID09PSBfc3ltYm9sOwogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKF9zeW1ib2wubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgdG9rZW5zID0gZGVmaVRva2Vucy5maWx0ZXIoZnVuY3Rpb24gKF9pdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gX3N5bWJvbC5pbmRleE9mKF9pdGVtLnN5bWJvbCkgPiAtMTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgdG9rZW5zID0gZGVmaVRva2VuczsKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQ4LmFicnVwdCgicmV0dXJuIiwgdG9rZW5zLm1hcChmdW5jdGlvbiAoX3Rva2VuKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5mcm9tVG9rZW5WYWx1ZShfdG9rZW4ucHJpY2UsIF90b2tlbiwgdHJ1ZSk7CiAgICAgICAgICAgICAgICB9KSk7CgogICAgICAgICAgICAgIGNhc2UgODoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0OC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlOCwgdGhpcyk7CiAgICAgIH0pKTsKCiAgICAgIGZ1bmN0aW9uIGZldGNoVG9rZW5QcmljZXMoX3g5KSB7CiAgICAgICAgcmV0dXJuIF9mZXRjaFRva2VuUHJpY2VzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmZXRjaFRva2VuUHJpY2VzOwogICAgfSgpCiAgICAvKioKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBfb3duZXJBZGRyZXNzCiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEZNaW50QWNjb3VudD59CiAgICAgKi8KCiAgfSwgewogICAga2V5OiAiZmV0Y2hGTWludEFjY291bnQiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9mZXRjaEZNaW50QWNjb3VudCA9IF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZTkoKSB7CiAgICAgICAgdmFyIF9vd25lckFkZHJlc3MsCiAgICAgICAgICAgIGRhdGEsCiAgICAgICAgICAgIGZNaW50QWNjb3VudCwKICAgICAgICAgICAgX2FyZ3M5ID0gYXJndW1lbnRzOwoKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTkkKF9jb250ZXh0OSkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDkucHJldiA9IF9jb250ZXh0OS5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX293bmVyQWRkcmVzcyA9IF9hcmdzOS5sZW5ndGggPiAwICYmIF9hcmdzOVswXSAhPT0gdW5kZWZpbmVkID8gX2FyZ3M5WzBdIDogJyc7CiAgICAgICAgICAgICAgICBfY29udGV4dDkubmV4dCA9IDM7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hcG9sbG9DbGllbnQucXVlcnkoewogICAgICAgICAgICAgICAgICBxdWVyeTogZ3FsKF90ZW1wbGF0ZU9iamVjdDkgfHwgKF90ZW1wbGF0ZU9iamVjdDkgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gICAgICAgICAgICAgICAgcXVlcnkgRk1pbnRBY2NvdW50KCRvd25lcjogQWRkcmVzcyEpIHtcbiAgICAgICAgICAgICAgICAgICAgZk1pbnRBY2NvdW50KG93bmVyOiAkb3duZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhdGVyYWwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbkFkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWxhbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2tlbiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZHJlc3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ltYm9sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGF0ZXJhbFZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsYXRlcmFsTGlzdFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVidCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuQWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhbGFuY2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRva2VuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ0VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnRMaXN0XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAiXSkpKSwKICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgICAgICAgICAgICAgb3duZXI6IF9vd25lckFkZHJlc3MKICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgZmV0Y2hQb2xpY3k6ICduZXR3b3JrLW9ubHknCiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgZGF0YSA9IF9jb250ZXh0OS5zZW50OwoKICAgICAgICAgICAgICAgIC8qKiBAdHlwZSB7Rk1pbnRBY2NvdW50fSAqLwogICAgICAgICAgICAgICAgZk1pbnRBY2NvdW50ID0gZGF0YS5kYXRhLmZNaW50QWNjb3VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuYWJydXB0KCJyZXR1cm4iLCBmTWludEFjY291bnQpOwoKICAgICAgICAgICAgICBjYXNlIDY6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDkuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTksIHRoaXMpOwogICAgICB9KSk7CgogICAgICBmdW5jdGlvbiBmZXRjaEZNaW50QWNjb3VudCgpIHsKICAgICAgICByZXR1cm4gX2ZldGNoRk1pbnRBY2NvdW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmZXRjaEZNaW50QWNjb3VudDsKICAgIH0oKQogICAgLyoqCiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW190b10KICAgICAqIEByZXR1cm4ge1Byb21pc2U8TnVtYmVyPn0KICAgICAqLwoKICB9LCB7CiAgICBrZXk6ICJmZXRjaEZUTVRva2VuUHJpY2UiLAogICAgdmFsdWU6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIF9mZXRjaEZUTVRva2VuUHJpY2UgPSBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUxMCgpIHsKICAgICAgICB2YXIgX3RvLAogICAgICAgICAgICBkYXRhLAogICAgICAgICAgICB0b2tlblByaWNlLAogICAgICAgICAgICBfYXJnczEwID0gYXJndW1lbnRzOwoKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTEwJChfY29udGV4dDEwKSB7CiAgICAgICAgICB3aGlsZSAoMSkgewogICAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0MTAucHJldiA9IF9jb250ZXh0MTAubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIF90byA9IF9hcmdzMTAubGVuZ3RoID4gMCAmJiBfYXJnczEwWzBdICE9PSB1bmRlZmluZWQgPyBfYXJnczEwWzBdIDogJ1VTRCc7CiAgICAgICAgICAgICAgICBfY29udGV4dDEwLm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYXBvbGxvQ2xpZW50LnF1ZXJ5KHsKICAgICAgICAgICAgICAgICAgcXVlcnk6IGdxbChfdGVtcGxhdGVPYmplY3QxMCB8fCAoX3RlbXBsYXRlT2JqZWN0MTAgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsKFsiXG4gICAgICAgICAgICAgICAgcXVlcnkgUHJpY2UoJHRvOiBTdHJpbmchKSB7XG4gICAgICAgICAgICAgICAgICAgIHByaWNlKHRvOiAkdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHByaWNlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAiXSkpKSwKICAgICAgICAgICAgICAgICAgdmFyaWFibGVzOiB7CiAgICAgICAgICAgICAgICAgICAgdG86IF90bwogICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICBmZXRjaFBvbGljeTogJ25ldHdvcmstb25seScKICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICBkYXRhID0gX2NvbnRleHQxMC5zZW50OwoKICAgICAgICAgICAgICAgIGlmIChkYXRhLmRhdGEucHJpY2UpIHsKICAgICAgICAgICAgICAgICAgX2NvbnRleHQxMC5uZXh0ID0gNjsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuYWJydXB0KCJyZXR1cm4iKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgdG9rZW5QcmljZSA9IHBhcnNlRmxvYXQoZGF0YS5kYXRhLnByaWNlLnByaWNlKTsKICAgICAgICAgICAgICAgIHRva2VuUHJpY2UgPSBwYXJzZUludCh0b2tlblByaWNlICogMTAwMDAwKSAvIDEwMDAwMDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDEwLmFicnVwdCgicmV0dXJuIiwgdG9rZW5QcmljZSk7CgogICAgICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0MTAuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZTEwLCB0aGlzKTsKICAgICAgfSkpOwoKICAgICAgZnVuY3Rpb24gZmV0Y2hGVE1Ub2tlblByaWNlKCkgewogICAgICAgIHJldHVybiBfZmV0Y2hGVE1Ub2tlblByaWNlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIH0KCiAgICAgIHJldHVybiBmZXRjaEZUTVRva2VuUHJpY2U7CiAgICB9KCkKICB9XSwgW3sKICAgIGtleTogImluc3RhbGwiLAogICAgdmFsdWU6CiAgICAvKioKICAgICAqIEBwYXJhbSB7VnVlfSBfVnVlCiAgICAgKiBAcGFyYW0ge3thcG9sbG9DbGllbnQ6IEFwb2xsb0NsaWVudH19IF9vcHRpb25zCiAgICAgKi8KICAgIGZ1bmN0aW9uIGluc3RhbGwoX1Z1ZSwgX29wdGlvbnMpIHsKICAgICAgaWYgKCFkZWZpKSB7CiAgICAgICAgZGVmaSA9IG5ldyBEZUZpKF9vcHRpb25zKTsKICAgICAgICBfVnVlLnByb3RvdHlwZS4kZGVmaSA9IGRlZmk7CiAgICAgIH0KICAgIH0KICB9XSk7CgogIHJldHVybiBEZUZpOwp9KCk7"},{"version":3,"names":["gql","cloneObject","isObjectEmpty","lowercaseFirstChar","web3utils","fFetch","defi","MAX_TOKEN_DECIMALS_IN_TABLES","filterTokens","DeFi","_options","apolloClient","liqCollateralRatio","minCollateralRatio","warningCollateralRatio","rewardCollateralRatio","mintFee","settingsLoaded","tokens","fusdToken","ftmToken","tokenDecimals","contracts","fMint","fMintReward","uniswapCoreFactory","uniswapRouter","fetchSettings","initProperties","_settings","dec","Math","pow","decimals","parseInt","minCollateralRatio4","rewardCollateralRatio4","mintFee4","fMintContract","fMintRewardDistribution","_tokens","find","_item","symbol","_token","_default","tokenPrice","getTokenPrice","_collateral","_tokenPrice","max","_collateralFUSD","_debt","liqPrice","parseFloat","value","color","fromTokenValue","price","_fMintAccount","debtValue","collateralValue","overallDebt","getOverallDebt","overallCollateral","getOverallCollateral","getMaxDebtFUSD","toBN","divn","sub","toString","_currDebtFUSD","_currCollateralFUSD","getMintingLimitFUSD","_value","_isPrice","undefined","isNaN","shiftDecPointLeft","priceDecimals","shiftDecPointRight","_dec","removeSN","idx","length","padLeft","slice","_float","indexOf","left","right","res","isHex","padRight","charAt","_decimals","toFixed","_toToken","toTokenPrice","result","mul","div","resultDecimals","shiftDecPoint","convertTokenValueWEI","toTokenValue","_a","_b","hex1","hex2","cmp","_account","debt","acountDebt","tokenAddress","address","collateral","acountCollateral","isActive","canMint","canBorrow","canDeposit","canTrade","query","fetchPolicy","data","defiConfiguration","_ownerAddress","_symbol","variables","owner","fetchGQLQuery","defiTokens","filter","filterTokensBySymbol","_setTokens","erc20TokenList","fetchERC20TokensAvailableBalances","tokenBalances","forEach","token","_t","balanceOf","erc20Assets","map","fMintAccount","_to","to","_Vue","prototype","$defi"],"sources":["/mnt/websites/ex.nextsmartchain.com/src/plugins/defi/defi.js"],"sourcesContent":["import './defi.types.js';\nimport gql from 'graphql-tag';\nimport {cloneObject, isObjectEmpty, lowercaseFirstChar} from '../../utils';\nimport web3utils from 'web3-utils';\nimport { fFetch } from '../ffetch.js';\n\n/** @type {BNBridgeExchange} */\nexport let defi = null;\n\n/** Maximum number of token decimal places to be displayed in tables. */\nexport const MAX_TOKEN_DECIMALS_IN_TABLES = 2;\n\n// TMP!!\nconst filterTokens = [];\n\n/**\n * Plugin for various DeFi requests and calculations.\n */\nexport class DeFi {\n    /**\n     * @param {Vue} _Vue\n     * @param {{apolloClient: ApolloClient}} _options\n     */\n    static install(_Vue, _options) {\n        if (!defi) {\n            defi = new DeFi(_options);\n            _Vue.prototype.$defi = defi;\n        }\n    }\n\n    /**\n     * @param {{apolloClient: ApolloClient}} _options\n     */\n    constructor(_options) {\n        this.apolloClient = _options.apolloClient;\n        /** Liquidation collateral ratio. */\n        this.liqCollateralRatio = 1.5;\n        /** Minimal collateral ratio. */\n        this.minCollateralRatio = 3;\n        /** Warning collateral ratio. */\n        this.warningCollateralRatio = 2.25; // (this.liqCollateralRatio + this.minCollateralRatio) / 2;\n        this.rewardCollateralRatio = 5;\n        this.mintFee = 0.0025;\n        /** DeFi settings was loaded. */\n        this.settingsLoaded = false;\n        /** @type {DefiToken[]} */\n        this.tokens = [];\n        /** @type {DefiToken} */\n        this.fusdToken = {};\n        /** @type {DefiToken} */\n        this.ftmToken = {};\n        /** Keys are token symbols, values are number of decimals. */\n        this.tokenDecimals = {};\n        /** Addresses of various contracts. */\n        this.contracts = {\n            fMint: '',\n            fMintReward: '',\n            uniswapCoreFactory: '',\n            uniswapRouter: '',\n        };\n    }\n\n    /**\n     * Load settings if it's necessary.\n     *\n     * @return {Promise}\n     */\n    async init() {\n        if (!this.settingsLoaded) {\n            this.settingsLoaded = true;\n            this.initProperties(await this.fetchSettings());\n        }\n    }\n\n    /**\n     * Set properties.\n     *\n     * @param {DefiSettings} _settings\n     */\n    initProperties(_settings) {\n        const dec = Math.pow(10, _settings.decimals);\n        const { contracts } = this;\n\n        // this.liqCollateralRatio = parseInt(_settings.liqCollateralRatio4, 16) / dec;\n        this.minCollateralRatio = parseInt(_settings.minCollateralRatio4, 16) / dec;\n        this.rewardCollateralRatio = parseInt(_settings.rewardCollateralRatio4, 16) / dec;\n        // this.warningCollateralRatio = parseInt(_settings.warningCollateralRatio4, 16) / dec;\n        this.mintFee = parseInt(_settings.mintFee4, 16) / dec;\n        contracts.fMint = _settings.fMintContract;\n        contracts.fMintReward = _settings.fMintRewardDistribution;\n        contracts.uniswapCoreFactory = _settings.uniswapCoreFactory;\n        contracts.uniswapRouter = _settings.uniswapRouter;\n    }\n\n    /**\n     * @param {DefiToken[]} _tokens\n     * @private\n     */\n    _setTokens(_tokens) {\n        this.tokens = _tokens;\n        this.fusdToken = _tokens.find((_item) => _item.symbol === 'FUSD');\n        this.ftmToken = _tokens.find((_item) => _item.symbol === 'NEXT');\n\n        /*\n        if (isObjectEmpty(this.tokenDecimals)) {\n            this.tokens.forEach((_token) => {\n                this._setTokenDecimals(_token);\n            });\n        }\n        */\n    }\n\n    /**\n     * @param {DefiToken} _token\n     * @private\n     */\n    /*\n    _setTokenDecimals(_token) {\n        const tokenPrice = this.getTokenPrice(_token);\n        let decimals = 0;\n\n        if (tokenPrice === 0) {\n            decimals = 6;\n        } else if (tokenPrice < 0.5) {\n            decimals = 1;\n        } else if (tokenPrice < 100) {\n            decimals = 2;\n        } else if (tokenPrice < 1000) {\n            decimals = 5;\n        } else {\n            decimals = 6;\n        }\n\n        this.tokenDecimals[_token.symbol] = decimals;\n    }\n    */\n\n    /**\n     * @param {DefiToken} _token\n     * @param {number} _default\n     * @return {number}\n     */\n    getTokenDecimals(_token, _default = 6) {\n        const tokenPrice = this.getTokenPrice(_token);\n        let decimals = _default;\n\n        if (tokenPrice < 0.5 && tokenPrice > 0) {\n            decimals = 1;\n        } else if (tokenPrice < 100) {\n            decimals = 2;\n        } else if (tokenPrice < 1000) {\n            decimals = 5;\n        }\n\n        return decimals;\n        // return this.tokenDecimals[_token.symbol] || 2;\n    }\n\n    /**\n     * @param {number} _collateral\n     * @param {number} _tokenPrice\n     * @return {number}\n     */\n    getMaxDebt(_collateral, _tokenPrice) {\n        let max = 0;\n\n        if (_collateral > 0) {\n            max = (_collateral * _tokenPrice) / this.minCollateralRatio;\n        }\n\n        return max;\n    }\n\n    getMaxDebtFUSD(_collateralFUSD) {\n        return _collateralFUSD > 0 ? _collateralFUSD / this.minCollateralRatio : 0;\n    }\n\n    /**\n     * @param {number} _debt\n     * @param {number} _collateral\n     * @return {number}\n     */\n    getLiquidationPrice(_debt, _collateral) {\n        let liqPrice = 0;\n\n        if (_debt > 0 && _collateral > 0) {\n            liqPrice = (_debt * this.liqCollateralRatio) / _collateral;\n        }\n\n        return liqPrice;\n    }\n\n    getMintingLimit(_debt, _collateral, _tokenPrice) {\n        // ratio between actual debt and liquidation debt\n        return _collateral > 0\n            ? (_debt / ((parseFloat(_collateral) * _tokenPrice) / this.liqCollateralRatio)) * 100\n            : 0;\n    }\n\n    getMintingLimitFUSD(_debt, _collateralFUSD) {\n        // ratio between actual debt and liquidation debt\n        return _collateralFUSD > 0 ? (_debt / (_collateralFUSD / this.liqCollateralRatio)) * 100 : 0;\n    }\n\n    /**\n     * Get color values for f-circle-progress and f-colored-number-range components\n     *\n     * @return {{color: string, value: number}[]}\n     */\n    getColors() {\n        return [\n            {\n                value: (this.liqCollateralRatio / this.minCollateralRatio) * 100,\n                color: '#ffaf19',\n            },\n            {\n                value: (this.warningCollateralRatio / this.minCollateralRatio) * 100,\n                color: '#ff1716',\n            },\n        ];\n    }\n\n    /**\n     * @param {number} _debt\n     * @param {number} _tokenPrice\n     * @return {number}\n     */\n    getMinCollateral(_debt, _tokenPrice) {\n        return (_debt * this.minCollateralRatio) / _tokenPrice;\n    }\n\n    /**\n     * @param {DefiToken} _token\n     * @return {string}\n     */\n    getTokenSymbol(_token) {\n        return _token && _token.symbol\n            ? _token.symbol !== 'NEXT'\n                ? lowercaseFirstChar(_token.symbol)\n                : _token.symbol\n            : '';\n    }\n\n    /**\n     * @param {DefiToken} _token\n     * @return {number}\n     */\n    getTokenPrice(_token) {\n        return _token && 'price' in _token ? this.fromTokenValue(_token.price, _token, true) : 0;\n    }\n\n    /**\n     * Get overall debt in FUSD.\n     *\n     * @param {FMintAccount} _fMintAccount\n     * @return {number}\n     */\n    getOverallDebt(_fMintAccount) {\n        return this.fromTokenValue(_fMintAccount.debtValue, this.fusdToken);\n    }\n\n    /**\n     * Get overall collateral in FUSD.\n     *\n     * @param {FMintAccount} _fMintAccount\n     * @return {number}\n     */\n    getOverallCollateral(_fMintAccount) {\n        return this.fromTokenValue(_fMintAccount.collateralValue, this.fusdToken);\n    }\n\n    /**\n     * Get overall borrow limit in FUSD.\n     *\n     * @param {FMintAccount} _fMintAccount\n     * @return {number}\n     */\n    getBorrowLimit(_fMintAccount) {\n        const overallDebt = this.getOverallDebt(_fMintAccount);\n        const overallCollateral = this.getOverallCollateral(_fMintAccount);\n\n        return this.getMaxDebtFUSD(overallCollateral) - overallDebt;\n    }\n\n    /**\n     * Get overall borrow limit in hex.\n     *\n     * @param {FMintAccount} _fMintAccount\n     * @return {number}\n     */\n    getBorrowLimitHex(_fMintAccount) {\n        const debtValue = web3utils.toBN(_fMintAccount.debtValue);\n        const collateralValue = web3utils.toBN(_fMintAccount.collateralValue);\n\n        return '0x' + collateralValue.divn(this.minCollateralRatio).sub(debtValue).toString('hex');\n    }\n\n    /**\n     * Get overall debt limit in FUSD.\n     *\n     * @param {FMintAccount} _fMintAccount\n     * @param {number} [_currDebtFUSD] Current debt in FUSD.\n     * @param {number} [_currCollateralFUSD] Current corrateral in FUSD.\n     * @return {number}\n     */\n    getDebtLimit(_fMintAccount, _currDebtFUSD = 0, _currCollateralFUSD = 0) {\n        const overallDebt = this.getOverallDebt(_fMintAccount);\n        const overallCollateral = this.getOverallCollateral(_fMintAccount);\n\n        return this.getMintingLimitFUSD(_currDebtFUSD + overallDebt, _currCollateralFUSD + overallCollateral);\n    }\n\n    /**\n     * Convert given value from token decimals space.\n     *\n     * @param {string} _value Hex value.\n     * @param {DefiToken} _token\n     * @param {boolean} [_isPrice]\n     */\n    fromTokenValue(_value, _token, _isPrice = false) {\n        let value = 0;\n\n        if (_value !== undefined && !isNaN(_value)) {\n            value = parseFloat(this.shiftDecPointLeft(_value, _isPrice ? _token.priceDecimals : _token.decimals));\n        }\n\n        return value;\n    }\n\n    /**\n     * Convert given value to token decimals space.\n     *\n     * @param {string} _value\n     * @param {DefiToken} _token\n     * @param {boolean} [_isPrice]\n     * @return {string}\n     */\n    toTokenValue(_value, _token, _isPrice = false) {\n        let value = 0;\n\n        if (_value !== undefined && !isNaN(_value)) {\n            value = this.shiftDecPointRight(_value.toString(), _isPrice ? _token.priceDecimals : _token.decimals);\n        }\n\n        return value;\n    }\n\n    /**\n     * @param {string} _value\n     * @param {number} _dec Number of decimals.\n     * @return {string}\n     */\n    shiftDecPointLeft(_value, _dec = 0) {\n        // const value = web3utils.toBN(_value).toString(10);\n        const value = web3utils.toBN(this.removeSN(_value, _dec)).toString(10);\n        const idx = value.length - _dec;\n\n        if (idx < 0) {\n            return `0.${web3utils.padLeft(value, _dec, '0')}`;\n        } else {\n            return value.slice(0, idx) + '.' + value.slice(idx);\n        }\n    }\n\n    /**\n     * @param {string} _value\n     * @param {number} _dec Number of decimals.\n     * @param {boolean} [_float] Don't remove decimals.\n     * @return {string}\n     */\n    shiftDecPointRight(_value, _dec = 0, _float = false) {\n        const value = this.removeSN(_value.toString(), _dec);\n        let idx = value.indexOf('.');\n        let left;\n        let right;\n        let res = '';\n        const isHex = value.indexOf('0x') === 0;\n\n        if (idx > -1) {\n            left = value.slice(0, idx);\n            right = value.slice(idx + 1);\n\n            if (_dec < right.length) {\n                res = left + right.slice(0, _dec) + '.' + right.slice(_dec);\n            } else if (_dec === right.length) {\n                res = left + right;\n            } else {\n                res = left + web3utils.padRight(right, _dec, '0');\n            }\n        } else {\n            res = value + web3utils.padRight('', _dec, '0');\n        }\n\n        // remove leading zeros\n        while (res.length > 0 && res.charAt(0) === '0') {\n            res = res.slice(1);\n        }\n\n        if (!_float) {\n            idx = res.indexOf('.');\n            if (idx > -1) {\n                res = res.slice(0, idx);\n            }\n\n            if (!res) {\n                res = '0';\n            }\n        }\n\n        if (isHex && res.charAt(0) === 'x') {\n            res = '0' + res;\n        }\n\n        return res;\n    }\n\n    /**\n     * @param {string} _value\n     * @param {number} _decimals\n     * @return {string}\n     */\n    shiftDecPoint(_value, _decimals) {\n        const value = _value.toString();\n\n        if (_decimals === 0) {\n            return value;\n        } else if (_decimals < 0) {\n            return this.shiftDecPointLeft(value, -_decimals);\n        } else {\n            return this.shiftDecPointRight(value, _decimals);\n        }\n    }\n\n    /**\n     * Remove scientific notation.\n     *\n     * @param {string|number} _value\n     * @param {number} _dec\n     * @return {string|*}\n     */\n    removeSN(_value, _dec) {\n        const value = typeof _value !== 'string' ? _value.toString() : _value;\n\n        if (value.indexOf('0x') === -1 && (value.indexOf('e') > -1 || value.indexOf('E') > -1)) {\n            return parseFloat(value).toFixed(_dec);\n        }\n\n        return _value;\n    }\n\n    /**\n     * Value and result value are both in \"WEI\".\n     *\n     * @param {string|number} _value Value in `_token` decimal space.\n     * @param {DefiToken} _token\n     * @param {DefiToken} _toToken\n     * @return {string}\n     */\n    convertTokenValueWEI(_value, _token, _toToken) {\n        if (isObjectEmpty(_token) || isObjectEmpty(_toToken)) {\n            return '';\n        }\n\n        const value = web3utils.toBN(_value);\n        const tokenPrice = web3utils.toBN(_token.price);\n        const toTokenPrice = web3utils.toBN(_toToken.price);\n        const result = value.mul(tokenPrice).div(toTokenPrice).toString(10);\n        const resultDecimals = _toToken.decimals - (_token.decimals + _token.priceDecimals - _toToken.priceDecimals);\n\n        return this.shiftDecPoint(result, resultDecimals);\n    }\n\n    /**\n     * Value and result value are converted from \"WEI\".\n     *\n     * @param {string|number} _value Value in `_token` decimal space.\n     * @param {DefiToken} _token\n     * @param {DefiToken} _toToken\n     * @return {string}\n     */\n    convertTokenValue(_value, _token, _toToken) {\n        return this.fromTokenValue(\n            this.convertTokenValueWEI(this.toTokenValue(_value, _token), _token, _toToken),\n            _toToken\n        );\n    }\n\n    /**\n     * Compare big numbers, hex.\n     *\n     * @param {string} _a\n     * @param {string} _b\n     * @return {-1 | 0 | 1} -1 (_a < _b), 0 (_a == _b), or 1 (_a > _b)\n     */\n    compareBN(_a, _b) {\n        const hex1 = web3utils.toBN(_a);\n        const hex2 = web3utils.toBN(_b);\n\n        return hex1.cmp(hex2);\n    }\n\n    /**\n     * Get defi account debt by token.\n     *\n     * @param {FMintAccount} _account\n     * @param {DefiToken} _token\n     * @return {FMintTokenBalance|{}}\n     */\n    getFMintAccountDebt(_account, _token) {\n        let debt = {};\n        let acountDebt;\n\n        if (_token && _account && _account.debt && _account.debt.length > 0) {\n            acountDebt = _account.debt.find((_item) => _item.tokenAddress === _token.address);\n            if (acountDebt) {\n                debt = acountDebt;\n            }\n        }\n\n        return debt;\n    }\n\n    /**\n     * Get defi account collateral by token.\n     *\n     * @param {FMintAccount} _account\n     * @param {DefiToken} _token\n     * @return {FMintTokenBalance|{}}\n     */\n    getFMintAccountCollateral(_account, _token) {\n        let collateral = {};\n        let acountCollateral;\n\n        if (_token && _account && _account.collateral && _account.collateral.length > 0) {\n            acountCollateral = _account.collateral.find((_item) => _item.tokenAddress === _token.address);\n            if (acountCollateral) {\n                collateral = acountCollateral;\n            }\n        }\n\n        return collateral;\n    }\n\n    /**\n     * @param {DefiToken} _token\n     * @return {boolean}\n     */\n    canTokenBeMinted(_token) {\n        // return _token && _token.isActive && _token.canMint && _token.symbol !== 'FUSD';\n        return _token && _token.isActive && _token.canMint;\n    }\n\n    /**\n     * @param {DefiToken} _token\n     * @return {boolean}\n     */\n    canTokenBeBorrowed(_token) {\n        // return _token && _token.isActive && _token.canBorrow && _token.symbol !== 'FUSD';\n        return _token && _token.isActive && _token.canBorrow;\n    }\n\n    /**\n     * @param {DefiToken} _token\n     * @return {boolean}\n     */\n    canTokenBeDeposited(_token) {\n        return _token && _token.isActive && _token.canDeposit && _token.symbol !== 'NEXT';\n    }\n\n    /**\n     * @param {DefiToken} _token\n     * @return {boolean}\n     */\n    canTokenBeTraded(_token) {\n        // return _token && _token.isActive && _token.canTrade;\n        return _token && _token.isActive && (_token.canTrade || _token.symbol === 'NEXT');\n        // return _token && _token.isActive && (_token.canTrade || _token.symbol === 'FUSD');\n    }\n\n    /**\n     * @param {DefiToken} _token\n     * @return {boolean}\n     */\n    filterTokensBySymbol(_token) {\n        return _token && filterTokens.indexOf(_token.symbol) > -1;\n    }\n\n    /**\n     * @return {Promise<DefiSettings>}\n     */\n    async fetchSettings() {\n        const data = await this.apolloClient.query({\n            query: gql`\n                query DefiSettings {\n                    defiConfiguration {\n                        mintFee4\n                        rewardCollateralRatio4\n                        minCollateralRatio4\n                        fMintContract\n                        decimals\n                    }\n                }\n            `,\n            fetchPolicy: 'network-only',\n        });\n\n        return data.data.defiConfiguration || {};\n    }\n\n    /**\n     * @param {string} _ownerAddress\n     * @param {string|array} [_symbol]\n     * @return {Promise<DefiToken[]>}\n     */\n    async fetchTokens(_ownerAddress, _symbol) {\n        const query = {\n            query: _ownerAddress\n                ? gql`\n                      query DefiTokens($owner: Address!) {\n                          defiTokens {\n                              address\n                              name\n                              symbol\n                              logoUrl\n                              decimals\n                              price\n                              priceDecimals\n                              totalSupply\n                              isActive\n                              canWrapFTM\n                              canDeposit\n                              canMint\n                              canBorrow\n                              canTrade\n                              availableBalance(owner: $owner)\n                              allowance(owner: $owner)\n                          }\n                      }\n                  `\n                : gql`\n                      query DefiTokens {\n                          defiTokens {\n                              address\n                              name\n                              symbol\n                              logoUrl\n                              decimals\n                              price\n                              priceDecimals\n                              totalSupply\n                              isActive\n                              canWrapFTM\n                              canDeposit\n                              canMint\n                              canBorrow\n                              canTrade\n                          }\n                      }\n                  `,\n            variables: {\n                owner: _ownerAddress,\n            },\n            // fetchPolicy: 'network-only',\n        };\n        // const data = await this.apolloClient.query(query);\n        const data = await fFetch.fetchGQLQuery(query, 'defiTokens');\n\n        let defiTokens = data.data.defiTokens || [];\n\n        if (filterTokens.length > 0) {\n            defiTokens = defiTokens.filter(this.filterTokensBySymbol);\n        }\n        // console.log(defiTokens);\n\n        let tokens = [];\n\n        this._setTokens(defiTokens);\n\n        if (_symbol) {\n            if (typeof _symbol === 'string') {\n                tokens = defiTokens.find((_item) => _item.symbol === _symbol);\n            } else if (_symbol.length) {\n                tokens = defiTokens.filter((_item) => _symbol.indexOf(_item.symbol) > -1);\n            }\n        } else {\n            tokens = defiTokens;\n        }\n\n        return tokens;\n    }\n\n    /**\n     * @param {string} [_ownerAddress]\n     * @param {string|array} [_symbol]\n     * @return {Promise<DefiToken[]>}\n     */\n    async fetchERC20Tokens(_ownerAddress, _symbol) {\n        const query = {\n            query: _ownerAddress\n                ? gql`\n                      query ERC20TokenList($owner: Address!) {\n                          erc20TokenList {\n                              address\n                              name\n                              symbol\n                              decimals\n                              totalSupply\n                              logoURL\n                              balanceOf(owner: $owner)\n                          }\n                      }\n                  `\n                : gql`\n                      query ERC20TokenList {\n                          erc20TokenList {\n                              address\n                              name\n                              symbol\n                              decimals\n                              totalSupply\n                              logoURL\n                          }\n                      }\n                  `,\n            variables: {\n                owner: _ownerAddress,\n            },\n            // fetchPolicy: 'network-only',\n        };\n        // const data = await this.apolloClient.query(query);\n        const data = await fFetch.fetchGQLQuery(query, 'erc20TokenList');\n\n        let erc20TokenList = data.data.erc20TokenList || [];\n\n        if (filterTokens.length > 0) {\n            erc20TokenList = erc20TokenList.filter(this.filterTokensBySymbol);\n        }\n        // console.log('erc20', erc20TokenList);\n\n        let tokens = [];\n\n        this._setTokens(erc20TokenList);\n\n        if (_symbol) {\n            if (typeof _symbol === 'string') {\n                tokens = erc20TokenList.find((_item) => _item.symbol === _symbol);\n            } else if (_symbol.length) {\n                tokens = erc20TokenList.filter((_item) => _symbol.indexOf(_item.symbol) > -1);\n            }\n        } else {\n            tokens = erc20TokenList;\n        }\n\n        return tokens;\n    }\n\n    /**\n     * @param {string} _ownerAddress\n     * @return {Promise<DefiToken[]>}\n     */\n    async fetchERC20TokensAvailableBalances(_ownerAddress) {\n        const query = {\n            query: gql`\n                query ERC20TokenList($owner: Address!) {\n                    erc20TokenList {\n                        address\n                        balanceOf(owner: $owner)\n                    }\n                }\n            `,\n            variables: {\n                owner: _ownerAddress,\n            },\n        };\n        const data = await fFetch.fetchGQLQuery(query, 'erc20TokenList');\n\n        return data.data.erc20TokenList || [];\n    }\n\n    /**\n     * @param {string} _ownerAddress\n     * @param {ERC20Token[]} _tokens\n     */\n    async getERC20TokensWithAvailableBalances(_ownerAddress, _tokens) {\n        const tokenBalances = await this.fetchERC20TokensAvailableBalances(_ownerAddress);\n        const tokens = cloneObject(_tokens);\n\n        if (tokenBalances) {\n            tokenBalances.forEach((_token) => {\n                const token = tokens.find((_t) => _t.address === _token.address);\n\n                if (token) {\n                    token.balanceOf = _token.balanceOf;\n                }\n            });\n        }\n\n        return tokens;\n    }\n\n    /**\n     * @param {string} [_ownerAddress]\n     * @return {Promise<ERC20Token[]>}\n     */\n    async fetchERC20Assets(_ownerAddress) {\n        const query = {\n            query: gql`\n                query Erc20Assets($owner: Address!) {\n                    erc20Assets(owner: $owner) {\n                        address\n                        name\n                        symbol\n                        decimals\n                        totalSupply\n                        logoURL\n                        balanceOf(owner: $owner)\n                    }\n                }\n            `,\n            variables: {\n                owner: _ownerAddress,\n            },\n            // fetchPolicy: 'network-only',\n        };\n        // const data = await this.apolloClient.query(query);\n        const data = await fFetch.fetchGQLQuery(query, 'erc20Assets');\n\n        return data && data.data ? data.data.erc20Assets : [] || [];\n    }\n\n    /**\n     * @param {string|array} [_symbol]\n     * @return {Promise<number[]>}\n     */\n    async fetchTokenPrices(_symbol) {\n        const data = await this.apolloClient.query({\n            query: gql`\n                query DefiTokens {\n                    defiTokens {\n                        address\n                        symbol\n                        decimals\n                        price\n                        priceDecimals\n                        isActive\n                    }\n                }\n            `,\n            fetchPolicy: 'network-only',\n        });\n        let defiTokens = data.data.defiTokens || [];\n        let tokens = [];\n\n        this._setTokens(defiTokens);\n\n        if (_symbol) {\n            if (typeof _symbol === 'string') {\n                tokens = defiTokens.find((_item) => _item.symbol === _symbol);\n            } else if (_symbol.length) {\n                tokens = defiTokens.filter((_item) => _symbol.indexOf(_item.symbol) > -1);\n            }\n        } else {\n            tokens = defiTokens;\n        }\n\n        return tokens.map((_token) => this.fromTokenValue(_token.price, _token, true));\n    }\n\n    /**\n     * @param {string} _ownerAddress\n     * @return {Promise<FMintAccount>}\n     */\n    async fetchFMintAccount(_ownerAddress = '') {\n        const data = await this.apolloClient.query({\n            query: gql`\n                query FMintAccount($owner: Address!) {\n                    fMintAccount(owner: $owner) {\n                        address\n                        collateral {\n                            type\n                            tokenAddress\n                            balance\n                            value\n                            token {\n                                address\n                                symbol\n                            }\n                        }\n                        collateralValue\n                        collateralList\n                        debt {\n                            type\n                            tokenAddress\n                            balance\n                            value\n                            token {\n                                address\n                                symbol\n                            }\n                        }\n                        debtValue\n                        debtList\n                    }\n                }\n            `,\n            variables: {\n                owner: _ownerAddress,\n            },\n            fetchPolicy: 'network-only',\n        });\n        /** @type {FMintAccount} */\n        const { fMintAccount } = data.data;\n\n        return fMintAccount;\n    }\n\n    /**\n     * @param {string} [_to]\n     * @return {Promise<Number>}\n     */\n    async fetchFTMTokenPrice(_to = 'USD') {\n        const data = await this.apolloClient.query({\n            query: gql`\n                query Price($to: String!) {\n                    price(to: $to) {\n                        price\n                    }\n                }\n            `,\n            variables: {\n                to: _to,\n            },\n            fetchPolicy: 'network-only',\n        });\n\n        if (!data.data.price) {\n            return;\n        }\n\n        let tokenPrice = parseFloat(data.data.price.price);\n\n        tokenPrice = parseInt(tokenPrice * 100000) / 100000;\n\n        return tokenPrice;\n    }\n}\n"],"mappings":"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"}]}