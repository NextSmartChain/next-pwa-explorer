{"remainingRequest":"/mnt/websites/ex.nextsmartchain.com/node_modules/thread-loader/dist/cjs.js!/mnt/websites/ex.nextsmartchain.com/node_modules/babel-loader/lib/index.js!/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js??ref--1-0!/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js??vue-loader-options!/mnt/websites/ex.nextsmartchain.com/src/components/TransactionVolumes.vue?vue&type=script&lang=js&","dependencies":[{"path":"/mnt/websites/ex.nextsmartchain.com/src/components/TransactionVolumes.vue","mtime":1657708593166},{"path":"/mnt/websites/ex.nextsmartchain.com/babel.config.js","mtime":1657708595230},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js","mtime":1655491106804},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/thread-loader/dist/cjs.js","mtime":1655491285854},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/babel-loader/lib/index.js","mtime":1655491285588},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/cache-loader/dist/cjs.js","mtime":1655491106804},{"path":"/mnt/websites/ex.nextsmartchain.com/node_modules/vue-loader/lib/index.js","mtime":1657708714280}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWwgZnJvbSAiL21udC93ZWJzaXRlcy9leC5uZXh0c21hcnRjaGFpbi5jb20vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbC5qcyI7CmltcG9ydCBfcmVnZW5lcmF0b3JSdW50aW1lIGZyb20gIi9tbnQvd2Vic2l0ZXMvZXgubmV4dHNtYXJ0Y2hhaW4uY29tL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9yZWdlbmVyYXRvclJ1bnRpbWUuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL21udC93ZWJzaXRlcy9leC5uZXh0c21hcnRjaGFpbi5jb20vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwoKdmFyIF90ZW1wbGF0ZU9iamVjdDsKCmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCBGTGlnaHR3ZWlnaHRDaGFydHMgZnJvbSAiQC9jb21wb25lbnRzL2NvcmUvRkxpZ2h0d2VpZ2h0Q2hhcnRzL0ZMaWdodHdlaWdodENoYXJ0cy52dWUiOwppbXBvcnQgZGF5anMgZnJvbSAiZGF5anMiOwppbXBvcnQgeyBnZXREYXlqc1VuaXRCeVNob3J0Y3V0LCBwYXJzZVRpbWVDb2RlIH0gZnJvbSAiQC91dGlscy90aW1lLmpzIjsKaW1wb3J0IGdxbCBmcm9tICJncmFwaHFsLXRhZyI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiVHJhbnNhY3Rpb25Wb2x1bWVzIiwKICBjb21wb25lbnRzOiB7CiAgICBGTGlnaHR3ZWlnaHRDaGFydHM6IEZMaWdodHdlaWdodENoYXJ0cwogIH0sCiAgcHJvcHM6IHsKICAgIHJlc29sdXRpb246IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICBkZWZhdWx0OiAnMTRkJwogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHR4Vm9sdW1lU2VyaWVzOiBbXQogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICByZXNvbHV0aW9uOiB7CiAgICAgIGhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZXIoX3ZhbHVlKSB7CiAgICAgICAgdGhpcy5sb2FkVHhWb2x1bWVzKHRoaXMuZ2V0YXRlQnlUaW1lY29kZShfdmFsdWUpKTsKICAgICAgfSwKICAgICAgaW1tZWRpYXRlOiB0cnVlCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICAvKioKICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbX3RpbWVDb2RlXQogICAgICogcmV0dXJuIHtzdHJpbmd9IERhdGUgaW4gYFlZWVktTU0tRERgIGZvcm1hdC4KICAgICAqLwogICAgZ2V0YXRlQnlUaW1lY29kZTogZnVuY3Rpb24gZ2V0YXRlQnlUaW1lY29kZSgpIHsKICAgICAgdmFyIF90aW1lQ29kZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogJzF5JzsKCiAgICAgIHZhciBub3cgPSBkYXlqcygpLnV0YygpOwogICAgICB2YXIgdGltZUNvZGUgPSBwYXJzZVRpbWVDb2RlKF90aW1lQ29kZSk7CiAgICAgIHJldHVybiBub3cuc3VidHJhY3QodGltZUNvZGUudmFsdWUsIGdldERheWpzVW5pdEJ5U2hvcnRjdXQodGltZUNvZGUudW5pdCkpLmZvcm1hdCgnWVlZWS1NTS1ERCcpOwogICAgfSwKICAgIGxvYWRUeFZvbHVtZXM6IGZ1bmN0aW9uIGxvYWRUeFZvbHVtZXMoKSB7CiAgICAgIHZhciBfYXJndW1lbnRzID0gYXJndW1lbnRzLAogICAgICAgICAgX3RoaXMgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovX3JlZ2VuZXJhdG9yUnVudGltZSgpLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICB2YXIgX2Zyb20sIF90bywgdHhWb2x1bWVzOwoKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfZnJvbSA9IF9hcmd1bWVudHMubGVuZ3RoID4gMCAmJiBfYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzWzBdIDogbnVsbDsKICAgICAgICAgICAgICAgIF90byA9IF9hcmd1bWVudHMubGVuZ3RoID4gMSAmJiBfYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzWzFdIDogbnVsbDsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA0OwogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmZldGNoVHhWb2x1bWVzKF9mcm9tLCBfdG8pOwoKICAgICAgICAgICAgICBjYXNlIDQ6CiAgICAgICAgICAgICAgICB0eFZvbHVtZXMgPSBfY29udGV4dC5zZW50OwogICAgICAgICAgICAgICAgX3RoaXMudHhWb2x1bWVTZXJpZXMgPSB0eFZvbHVtZXMubWFwKGZ1bmN0aW9uIChfaXRlbSkgewogICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHRpbWU6IF9pdGVtLmRheSwKICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX2l0ZW0udm9sdW1lCiAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuc3RvcCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSwgX2NhbGxlZSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIGZldGNoVHhWb2x1bWVzOiBmdW5jdGlvbiBmZXRjaFR4Vm9sdW1lcygpIHsKICAgICAgdmFyIF9hcmd1bWVudHMyID0gYXJndW1lbnRzLAogICAgICAgICAgX3RoaXMyID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL19yZWdlbmVyYXRvclJ1bnRpbWUoKS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUyKCkgewogICAgICAgIHZhciBfZnJvbSwgX3RvLCBkYXRhOwoKICAgICAgICByZXR1cm4gX3JlZ2VuZXJhdG9yUnVudGltZSgpLndyYXAoZnVuY3Rpb24gX2NhbGxlZTIkKF9jb250ZXh0MikgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dDIucHJldiA9IF9jb250ZXh0Mi5uZXh0KSB7CiAgICAgICAgICAgICAgY2FzZSAwOgogICAgICAgICAgICAgICAgX2Zyb20gPSBfYXJndW1lbnRzMi5sZW5ndGggPiAwICYmIF9hcmd1bWVudHMyWzBdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzMlswXSA6IG51bGw7CiAgICAgICAgICAgICAgICBfdG8gPSBfYXJndW1lbnRzMi5sZW5ndGggPiAxICYmIF9hcmd1bWVudHMyWzFdICE9PSB1bmRlZmluZWQgPyBfYXJndW1lbnRzMlsxXSA6IG51bGw7CiAgICAgICAgICAgICAgICBfY29udGV4dDIubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLiRhcG9sbG8ucXVlcnkoewogICAgICAgICAgICAgICAgICBxdWVyeTogZ3FsKF90ZW1wbGF0ZU9iamVjdCB8fCAoX3RlbXBsYXRlT2JqZWN0ID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbChbIlxuICAgICAgICAgICAgICAgICAgICBxdWVyeSBUeFZvbHVtZXMoJGZyb206U3RyaW5nLCAkdG86U3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnhWb2x1bWUoZnJvbTogJGZyb20sIHRvOiAkdG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbW91bnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICJdKSkpLAogICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHsKICAgICAgICAgICAgICAgICAgICBmcm9tOiBfZnJvbSwKICAgICAgICAgICAgICAgICAgICB0bzogX3RvCiAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgIGZldGNoUG9saWN5OiAnbmV0d29yay1vbmx5JwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgNDoKICAgICAgICAgICAgICAgIGRhdGEgPSBfY29udGV4dDIuc2VudDsKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dDIuYWJydXB0KCJyZXR1cm4iLCBkYXRhLmRhdGEudHJ4Vm9sdW1lIHx8IFtdKTsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgICAgICByZXR1cm4gX2NvbnRleHQyLnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUyKTsKICAgICAgfSkpKCk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"mappings":";;;;;;;AAyBA;AACA;AACA;AACA;AAEA;EACAA,0BADA;EAGAC;IAAAC;EAAA,CAHA;EAKAC;IACAC;MACAC,YADA;MAEAC;IAFA;EADA,CALA;EAYAC,IAZA,kBAYA;IACA;MACAC;IADA;EAGA,CAhBA;EAkBAC;IACAL;MACAM,OADA,mBACAC,MADA,EACA;QACA;MACA,CAHA;MAIAC;IAJA;EADA,CAlBA;EA2BAC;IACA;AACA;AACA;AACA;IACAC,gBALA,8BAKA;MAAA;;MACA;MACA;MAEA;IACA,CAVA;IAYAC,aAZA,2BAYA;MAAA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAAC;gBAAAC;gBAAA;gBAAA,OACA,gCADA;;cAAA;gBACAC,SADA;gBAGA;kBACA;oBACAC,eADA;oBAEAC;kBAFA;gBAIA,CALA;;cAHA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IASA,CArBA;IAuBAC,cAvBA,4BAuBA;MAAA;MAAA;;MAAA;QAAA;;QAAA;UAAA;YAAA;cAAA;gBAAAL;gBAAAC;gBAAA;gBAAA,OACA;kBACAK,wXADA;kBAUAC;oBACAC,WADA;oBAEAC;kBAFA,CAVA;kBAcAC;gBAdA,EADA;;cAAA;gBACAnB,IADA;gBAAA,kCAkBAA,yBAlBA;;cAAA;cAAA;gBAAA;YAAA;UAAA;QAAA;MAAA;IAmBA;EA1CA;AA3BA","names":["name","components","FLightweightCharts","props","resolution","type","default","data","txVolumeSeries","watch","handler","_value","immediate","methods","getateByTimecode","loadTxVolumes","_from","_to","txVolumes","time","value","fetchTxVolumes","query","variables","from","to","fetchPolicy"],"sourceRoot":"src/components","sources":["TransactionVolumes.vue"],"sourcesContent":["<template>\n    <div class=\"transactionvolumes\">\n        <f-lightweight-charts\n            :series=\"txVolumeSeries\"\n            series-type=\"area\"\n            __time-to-timestamp\n            :fit-content=\"true\"\n            :height=\"280\"\n            :options=\"{ handleScroll: false,handleScale: false }\"\n        />\n        <!--                    <f-lightweight-charts\n            ref=\"chart\"\n            :series=\"txVolumeSeries\"\n            series-type=\"histogram\"\n            :series-options=\"{ priceFormat: { type: 'volume' } }\"\n            __transform-values=\"to-eth\"\n            time-to-timestamp\n            :height=\"280\"\n            :options=\"{handleScroll: true,handleScale: true }\"\n        />-->\n\n    </div>\n</template>\n\n<script>\nimport FLightweightCharts from \"@/components/core/FLightweightCharts/FLightweightCharts.vue\";\nimport dayjs from \"dayjs\";\nimport {getDayjsUnitByShortcut, parseTimeCode} from \"@/utils/time.js\";\nimport gql from \"graphql-tag\";\n\nexport default {\n    name: \"TransactionVolumes\",\n\n    components: {FLightweightCharts},\n\n    props: {\n        resolution: {\n            type: String,\n            default: '14d',\n        }\n    },\n\n    data() {\n        return {\n            txVolumeSeries: [],\n        }\n    },\n\n    watch: {\n        resolution: {\n            handler(_value) {\n                this.loadTxVolumes(this.getateByTimecode(_value));\n            },\n            immediate: true,\n        }\n    },\n\n    methods: {\n        /**\n         * @param {string} [_timeCode]\n         * return {string} Date in `YYYY-MM-DD` format.\n         */\n        getateByTimecode(_timeCode = '1y') {\n            const now = dayjs().utc();\n            const timeCode = parseTimeCode(_timeCode);\n\n            return now.subtract(timeCode.value, getDayjsUnitByShortcut(timeCode.unit)).format('YYYY-MM-DD');\n        },\n\n        async loadTxVolumes(_from = null, _to = null) {\n            const txVolumes = await this.fetchTxVolumes(_from, _to);\n\n            this.txVolumeSeries = txVolumes.map((_item) => {\n                return {\n                    time: _item.day,\n                    value: _item.volume,\n                };\n            });\n        },\n\n        async fetchTxVolumes(_from = null, _to = null) {\n            const data = await this.$apollo.query({\n                query: gql`\n                    query TxVolumes($from:String, $to:String) {\n                        trxVolume(from: $from, to: $to) {\n                            day\n                            amount\n                            volume\n                        }\n                    }\n                `,\n                variables: {\n                    from: _from,\n                    to: _to,\n                },\n                fetchPolicy: 'network-only',\n            });\n\n            return data.data.trxVolume || [];\n        },\n\n    }\n}\n</script>\n\n<style scoped>\n\n</style>\n"]}]}